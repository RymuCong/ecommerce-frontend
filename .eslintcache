[{"F:\\Java-Project\\ecommerce-frontend\\src\\index.js":"1","F:\\Java-Project\\ecommerce-frontend\\src\\api\\instances.js":"2","F:\\Java-Project\\ecommerce-frontend\\src\\redux\\store.js":"3","F:\\Java-Project\\ecommerce-frontend\\src\\App\\App.js":"4","F:\\Java-Project\\ecommerce-frontend\\src\\utils.js":"5","F:\\Java-Project\\ecommerce-frontend\\src\\redux\\slices\\category.js":"6","F:\\Java-Project\\ecommerce-frontend\\src\\redux\\slices\\order.js":"7","F:\\Java-Project\\ecommerce-frontend\\src\\routes\\appRoutes.js":"8","F:\\Java-Project\\ecommerce-frontend\\src\\redux\\slices\\user.js":"9","F:\\Java-Project\\ecommerce-frontend\\src\\redux\\slices\\product.js":"10","F:\\Java-Project\\ecommerce-frontend\\src\\redux\\slices\\admin.js":"11","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Footer\\index.js":"12","F:\\Java-Project\\ecommerce-frontend\\src\\App\\Client.js":"13","F:\\Java-Project\\ecommerce-frontend\\src\\App\\Admin.js":"14","F:\\Java-Project\\ecommerce-frontend\\src\\api\\endpoints.js":"15","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Footer\\style.js":"16","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Loader\\index.js":"17","F:\\Java-Project\\ecommerce-frontend\\src\\routes\\adminRoutes.js":"18","F:\\Java-Project\\ecommerce-frontend\\src\\components\\AdminHeader\\index.js":"19","F:\\Java-Project\\ecommerce-frontend\\src\\routes\\clientRoutes.js":"20","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Checkout\\index.js":"21","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\pages\\Orders\\index.js":"22","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\pages\\Order\\index.js":"23","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\ProductPage\\index.js":"24","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\CategoryProducts\\index.js":"25","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Home\\index.js":"26","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\UserForm\\index.js":"27","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Shop\\index.js":"28","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\pages\\Orders\\style.js":"29","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\pages\\Order\\style.js":"30","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Checkout\\style.js":"31","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Checkout\\Payment.js":"32","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Checkout\\Shipping.js":"33","F:\\Java-Project\\ecommerce-frontend\\src\\hoc\\withUserAuth.js":"34","F:\\Java-Project\\ecommerce-frontend\\src\\components\\AddReview\\index.js":"35","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\CategoryProducts\\style.js":"36","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Shop\\style.js":"37","F:\\Java-Project\\ecommerce-frontend\\src\\hoc\\withAdminAuth.js":"38","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Home\\style.js":"39","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\UserForm\\style.js":"40","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Products\\index.js":"41","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Filter\\index.js":"42","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Hero\\index.js":"43","F:\\Java-Project\\ecommerce-frontend\\src\\components\\AddReview\\style.js":"44","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Search\\index.js":"45","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\ProductPage\\style.js":"46","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Review\\index.js":"47","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Cart\\index.js":"48","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\EditProfile\\index.js":"49","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Profile\\index.js":"50","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Signup\\index.js":"51","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Hero\\style.js":"52","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Filter\\style.js":"53","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Product\\index.js":"54","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Review\\style.js":"55","F:\\Java-Project\\ecommerce-frontend\\src\\components\\AdminHeader\\style.js":"56","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\SearchPage\\index.js":"57","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Login\\index.js":"58","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\CategoryForm\\index.js":"59","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Login\\style.js":"60","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Profile\\style.js":"61","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Cart\\style.js":"62","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Categories\\index.js":"63","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\ProductForm\\index.js":"64","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Products\\index.js":"65","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Home\\index.js":"66","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Login\\index.js":"67","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Product\\style.js":"68","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Users\\index.js":"69","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Tags\\index.js":"70","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\TagForm\\index.js":"71","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\SearchPage\\style.js":"72","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\CategoryForm\\style.js":"73","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Products\\Row.js":"74","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Products\\style.js":"75","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\ProductForm\\style.js":"76","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Categories\\style.js":"77","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Home\\style.js":"78","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Tags\\style.js":"79","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\TagForm\\style.js":"80","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Users\\style.js":"81","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Users\\Row.js":"82","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Header\\index.js":"83","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Header\\style.js":"84","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Sidebar\\index.js":"85","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Sidebar\\style.js":"86"},{"size":1031,"mtime":1733028914783,"results":"87","hashOfConfig":"88"},{"size":599,"mtime":1733028914779,"results":"89","hashOfConfig":"88"},{"size":513,"mtime":1733028914792,"results":"90","hashOfConfig":"88"},{"size":1081,"mtime":1733028914779,"results":"91","hashOfConfig":"88"},{"size":305,"mtime":1733028914792,"results":"92","hashOfConfig":"88"},{"size":717,"mtime":1733418105585,"results":"93","hashOfConfig":"88"},{"size":2485,"mtime":1733327373711,"results":"94","hashOfConfig":"88"},{"size":255,"mtime":1733028914792,"results":"95","hashOfConfig":"88"},{"size":8815,"mtime":1733415928667,"results":"96","hashOfConfig":"88"},{"size":6112,"mtime":1733559233033,"results":"97","hashOfConfig":"88"},{"size":19084,"mtime":1733415928667,"results":"98","hashOfConfig":"88"},{"size":675,"mtime":1733556438205,"results":"99","hashOfConfig":"88"},{"size":959,"mtime":1733028914779,"results":"100","hashOfConfig":"88"},{"size":974,"mtime":1733028914775,"results":"101","hashOfConfig":"88"},{"size":2640,"mtime":1733415928663,"results":"102","hashOfConfig":"88"},{"size":414,"mtime":1733028914779,"results":"103","hashOfConfig":"88"},{"size":282,"mtime":1733028914779,"results":"104","hashOfConfig":"88"},{"size":2256,"mtime":1733415928667,"results":"105","hashOfConfig":"88"},{"size":3743,"mtime":1733415928663,"results":"106","hashOfConfig":"88"},{"size":1861,"mtime":1733028914792,"results":"107","hashOfConfig":"88"},{"size":5209,"mtime":1733327373709,"results":"108","hashOfConfig":"88"},{"size":3670,"mtime":1733327373710,"results":"109","hashOfConfig":"88"},{"size":8914,"mtime":1733327373710,"results":"110","hashOfConfig":"88"},{"size":4737,"mtime":1733327373709,"results":"111","hashOfConfig":"88"},{"size":4023,"mtime":1733557487383,"results":"112","hashOfConfig":"88"},{"size":1695,"mtime":1733556345793,"results":"113","hashOfConfig":"88"},{"size":6360,"mtime":1733415928667,"results":"114","hashOfConfig":"88"},{"size":3631,"mtime":1733555317432,"results":"115","hashOfConfig":"88"},{"size":327,"mtime":1733028914791,"results":"116","hashOfConfig":"88"},{"size":664,"mtime":1733028914791,"results":"117","hashOfConfig":"88"},{"size":1259,"mtime":1733028914787,"results":"118","hashOfConfig":"88"},{"size":1963,"mtime":1733028914787,"results":"119","hashOfConfig":"88"},{"size":2039,"mtime":1733028914787,"results":"120","hashOfConfig":"88"},{"size":494,"mtime":1733028914783,"results":"121","hashOfConfig":"88"},{"size":2359,"mtime":1733028914779,"results":"122","hashOfConfig":"88"},{"size":170,"mtime":1733028914787,"results":"123","hashOfConfig":"88"},{"size":170,"mtime":1733028914787,"results":"124","hashOfConfig":"88"},{"size":516,"mtime":1733028914783,"results":"125","hashOfConfig":"88"},{"size":262,"mtime":1733028914787,"results":"126","hashOfConfig":"88"},{"size":682,"mtime":1733415928667,"results":"127","hashOfConfig":"88"},{"size":366,"mtime":1733049182163,"results":"128","hashOfConfig":"88"},{"size":1143,"mtime":1733028914779,"results":"129","hashOfConfig":"88"},{"size":56190,"mtime":1733556438195,"results":"130","hashOfConfig":"88"},{"size":216,"mtime":1733028914779,"results":"131","hashOfConfig":"88"},{"size":1128,"mtime":1733547594886,"results":"132","hashOfConfig":"88"},{"size":1075,"mtime":1733028914787,"results":"133","hashOfConfig":"88"},{"size":765,"mtime":1733028914783,"results":"134","hashOfConfig":"88"},{"size":7330,"mtime":1733327373709,"results":"135","hashOfConfig":"88"},{"size":2366,"mtime":1733028914787,"results":"136","hashOfConfig":"88"},{"size":1781,"mtime":1733327373709,"results":"137","hashOfConfig":"88"},{"size":2527,"mtime":1733028914787,"results":"138","hashOfConfig":"88"},{"size":872,"mtime":1733028914779,"results":"139","hashOfConfig":"88"},{"size":364,"mtime":1733028914779,"results":"140","hashOfConfig":"88"},{"size":2489,"mtime":1733500361334,"results":"141","hashOfConfig":"88"},{"size":479,"mtime":1733028914783,"results":"142","hashOfConfig":"88"},{"size":572,"mtime":1733028914779,"results":"143","hashOfConfig":"88"},{"size":1368,"mtime":1733028914787,"results":"144","hashOfConfig":"88"},{"size":2244,"mtime":1733028914787,"results":"145","hashOfConfig":"88"},{"size":3506,"mtime":1733327373707,"results":"146","hashOfConfig":"88"},{"size":546,"mtime":1733028914787,"results":"147","hashOfConfig":"88"},{"size":407,"mtime":1733028914787,"results":"148","hashOfConfig":"88"},{"size":446,"mtime":1733028914787,"results":"149","hashOfConfig":"88"},{"size":3658,"mtime":1733415928663,"results":"150","hashOfConfig":"88"},{"size":14242,"mtime":1733415928667,"results":"151","hashOfConfig":"88"},{"size":4912,"mtime":1733327373709,"results":"152","hashOfConfig":"88"},{"size":1809,"mtime":1733415928663,"results":"153","hashOfConfig":"88"},{"size":2254,"mtime":1733415928667,"results":"154","hashOfConfig":"88"},{"size":742,"mtime":1733028914782,"results":"155","hashOfConfig":"88"},{"size":4830,"mtime":1733415928667,"results":"156","hashOfConfig":"88"},{"size":3958,"mtime":1733415928667,"results":"157","hashOfConfig":"88"},{"size":3368,"mtime":1733415928667,"results":"158","hashOfConfig":"88"},{"size":170,"mtime":1733028914787,"results":"159","hashOfConfig":"88"},{"size":437,"mtime":1733028914783,"results":"160","hashOfConfig":"88"},{"size":4179,"mtime":1733327373708,"results":"161","hashOfConfig":"88"},{"size":967,"mtime":1733043751292,"results":"162","hashOfConfig":"88"},{"size":682,"mtime":1733028914783,"results":"163","hashOfConfig":"88"},{"size":371,"mtime":1733028914783,"results":"164","hashOfConfig":"88"},{"size":417,"mtime":1733028914783,"results":"165","hashOfConfig":"88"},{"size":371,"mtime":1733415928667,"results":"166","hashOfConfig":"88"},{"size":437,"mtime":1733415928667,"results":"167","hashOfConfig":"88"},{"size":967,"mtime":1733415928667,"results":"168","hashOfConfig":"88"},{"size":4420,"mtime":1733415928667,"results":"169","hashOfConfig":"88"},{"size":5809,"mtime":1733556410340,"results":"170","hashOfConfig":"88"},{"size":769,"mtime":1733028914779,"results":"171","hashOfConfig":"88"},{"size":5001,"mtime":1733048371902,"results":"172","hashOfConfig":"88"},{"size":375,"mtime":1733028914783,"results":"173","hashOfConfig":"88"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},"1nxrhfc",{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"176"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"176"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"176"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"176"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"176"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"176"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"176"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"176"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"176"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"176"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"176"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"176"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"176"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"176"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"176"},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"300","messages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"176"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"176"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"176"},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"176"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},"F:\\Java-Project\\ecommerce-frontend\\src\\index.js",[],["366","367"],"F:\\Java-Project\\ecommerce-frontend\\src\\api\\instances.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\redux\\store.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\App\\App.js",["368"],"import { useEffect } from \"react\";\r\nimport { createMuiTheme, ThemeProvider, CssBaseline } from \"@material-ui/core\";\r\nimport { Route, Switch, useHistory } from \"react-router-dom\";\r\nimport { setHistory } from \"../utils\";\r\nimport { NotificationContainer } from \"react-notifications\";\r\nimport { appRoutes } from \"../routes/appRoutes\";\r\nimport { Footer } from \"../components/Footer/\";\r\n\r\nexport const App = () => {\r\n  const theme = createMuiTheme({\r\n    typography: {\r\n      fontFamily: \"Josefin Sans, sans-serif\",\r\n    },\r\n    palette: {\r\n      primary: {\r\n        main: \"#3399FF\",\r\n      },\r\n      secondary: {\r\n        main: \"#EF837B\",\r\n      },\r\n    },\r\n  });\r\n\r\n  const history = useHistory();\r\n\r\n  // Initializing the history object so that we can use it in redux\r\n  useEffect(() => setHistory(history), []);\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Switch>\r\n        {appRoutes.map((route) => (\r\n          <Route {...route} />\r\n        ))}\r\n      </Switch>\r\n      <Footer />\r\n      <NotificationContainer />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\utils.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\redux\\slices\\category.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\redux\\slices\\order.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\routes\\appRoutes.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\redux\\slices\\user.js",["369"],"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { Axios, UserAxios } from \"../../api/instances\";\r\nimport * as Api from \"../../api/endpoints\";\r\nimport { history } from \"../../utils\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\nconst initialState = {\r\n  user: {},\r\n  loading: false,\r\n  authLoading: false,\r\n  cartLoading: false,\r\n};\r\n\r\nconst signup = createAsyncThunk(\r\n  \"users/signup\",\r\n  async ({ name, email, password }) => {\r\n    try {\r\n      const res = await Axios.post(Api.USER_SIGNUP, {\r\n        name,\r\n        email,\r\n        password,\r\n      });\r\n      history.push(\"/\");\r\n      return res.data;\r\n    } catch (error) {\r\n      throw error?.response?.data || error.message;\r\n    }\r\n  }\r\n);\r\n\r\nconst login = createAsyncThunk(\"users/login\", async ({ email, password }) => {\r\n    const adminToken = localStorage.getItem(\"adminToken\");\r\n    if (adminToken) {\r\n        throw new Error(\"Please logout from the admin account first.\");\r\n    }\r\n    try {\r\n    const res = await Axios.post(Api.USER_LOGIN, {\r\n      email,\r\n      password,\r\n    });\r\n    history.push(\"/\");\r\n    return res.data;\r\n  } catch (error) {\r\n    throw error?.response?.data || error.message;\r\n  }\r\n});\r\n\r\nconst isLogin = createAsyncThunk(\"users/isLogin\", async () => {\r\n  const token = localStorage.getItem(\"userToken\");\r\n  if (!token) throw \"ERROR!\";\r\n\r\n  const res = await UserAxios.get(Api.IS_USER_LOGIN, {\r\n    headers: {\r\n      Authorization: token,\r\n    },\r\n  });\r\n  return res.data;\r\n});\r\n\r\nconst editUser = createAsyncThunk(\r\n  \"users/editUser\",\r\n  async ({ name, email, password }) => {\r\n    try {\r\n      const res = await UserAxios.patch(Api.UPDATE_USER, {\r\n        name,\r\n        email,\r\n        password,\r\n      });\r\n      history.push(\"/profile\");\r\n      return res.data.user;\r\n    } catch (error) {\r\n      throw error?.response?.data || error.message;\r\n    }\r\n  }\r\n);\r\n\r\nconst addToCart = createAsyncThunk(\"users/addToCart\", async (id) => {\r\n    const adminToken = localStorage.getItem(\"adminToken\");\r\n    if (adminToken) {\r\n        throw new Error(\"Admins cannot add items to the cart.\");\r\n    }\r\n\r\n    try {\r\n    const res = await UserAxios.post(Api.ADD_TO_CART(id), {\r\n      Authorization: localStorage.getItem(\"userToken\"),\r\n    });\r\n    return res.data;\r\n  } catch (error) {\r\n    throw error?.response?.data || error.message;\r\n  }\r\n});\r\n\r\nconst getCart = createAsyncThunk(\"users/getCart\", async () => {\r\n    try {\r\n        const res = await UserAxios.get(Api.GET_CART, {\r\n            Authorization: localStorage.getItem(\"userToken\"),\r\n        });\r\n        return res.data;\r\n    } catch (error) {\r\n        throw error?.response?.data || error.message;\r\n    }\r\n});\r\n\r\nconst updateProductFromCart = createAsyncThunk(\r\n    \"users/updateProductFromCart\",\r\n    async ({ id, quantity }) => {\r\n      try {\r\n        const res = await UserAxios.patch(Api.UPDATE_CART_PRODUCT(id, quantity), {\r\n          headers: {\r\n            Authorization: localStorage.getItem(\"userToken\"),\r\n          },\r\n        });\r\n        return res.data;\r\n      } catch (error) {\r\n        throw error?.response?.data || error.message;\r\n      }\r\n    }\r\n);\r\n\r\nconst deleteFromCart = createAsyncThunk(\"users/deleteFromCart\", async (id) => {\r\n  try {\r\n    const res = await UserAxios.delete(Api.DELETE_FROM_CART(id), {\r\n        headers: {\r\n            Authorization: localStorage.getItem(\"userToken\"),\r\n        },\r\n    });\r\n    return res.data;\r\n  } catch (error) {\r\n    throw error?.response?.data || error.message;\r\n  }\r\n});\r\n\r\nconst createOrder = createAsyncThunk(\"users/createOrder\", async (data) => {\r\n    try {\r\n        const res = await UserAxios.post(Api.CREATE_ORDER, data ,{\r\n        headers: {\r\n            Authorization: localStorage.getItem(\"userToken\"),\r\n        },\r\n        });\r\n        console.log(res.data);\r\n        NotificationManager.success(\"Order placed!\");\r\n        history.push(\"/\"); // Navigate to the home page\r\n        return res.data;\r\n    } catch (error) {\r\n        throw error?.response?.data || error.message;\r\n    }\r\n});\r\n\r\n\r\nconst usersSlice = createSlice({\r\n  name: \"users\",\r\n  initialState,\r\n  reducers: {\r\n    userLogout(state, action) {\r\n      localStorage.removeItem(\"userToken\");\r\n      state.user = null;\r\n      NotificationManager.success(\"Logged out!\");\r\n    },\r\n    emptyCart(state, action) {\r\n      state.cart = {\r\n        cartItems: [],\r\n        totalPrice: 0,\r\n      };\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(signup.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(signup.fulfilled, (state, action) => {\r\n        state.user = action.payload.user;\r\n        localStorage.setItem(\"userToken\", `Bearer ${action.payload.token}`);\r\n        state.authLoading = false;\r\n        NotificationManager.success(\"Signed up!\");\r\n      })\r\n      .addCase(signup.rejected, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(login.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.user = action.payload;\r\n        localStorage.setItem(\"userToken\", `Bearer ${action.payload.token}`);\r\n        state.authLoading = false;\r\n        NotificationManager.success(\"Logged in!\");\r\n      })\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(isLogin.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(isLogin.fulfilled, (state, action) => {\r\n        state.user = action.payload;\r\n        state.loading = false;\r\n      })\r\n      .addCase(isLogin.rejected, (state, action) => {\r\n        state.loading = false;\r\n        localStorage.removeItem(\"userToken\");\r\n        state.user = null\r\n      })\r\n      .addCase(editUser.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(editUser.fulfilled, (state, action) => {\r\n        state.user = action.payload;\r\n        state.authLoading = false;\r\n        NotificationManager.success(\"Profile updated!\");\r\n      })\r\n      .addCase(editUser.rejected, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(addToCart.pending, (state, action) => {\r\n        state.cartLoading = true;\r\n      })\r\n      .addCase(addToCart.fulfilled, (state, action) => {\r\n        state.user = action.payload;\r\n        state.cartLoading = false;\r\n        NotificationManager.success(\"Added to cart\");\r\n      })\r\n      .addCase(addToCart.rejected, (state, action) => {\r\n        state.cartLoading = false;\r\n        if (action.error.message === \"Unauthenticated\") {\r\n          NotificationManager.error(\"Login to continue!\");\r\n        } else {\r\n          NotificationManager.error(action.error.message);\r\n        }\r\n      })\r\n        .addCase(getCart.pending, (state, action) => {\r\n            state.cartLoading = true;\r\n        })\r\n        .addCase(getCart.fulfilled, (state, action) => {\r\n            state.cart = action.payload;\r\n            state.cartLoading = false;\r\n        })\r\n      .addCase(updateProductFromCart.pending, (state, action) => {\r\n        state.cartLoading = true;\r\n      })\r\n      .addCase(updateProductFromCart.fulfilled, (state, action) => {\r\n        state.cart = action.payload;\r\n        state.cartLoading = false;\r\n      })\r\n      .addCase(updateProductFromCart.rejected, (state, action) => {\r\n        state.cartLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(deleteFromCart.pending, (state, action) => {\r\n        state.cartLoading = true;\r\n      })\r\n      .addCase(deleteFromCart.fulfilled, (state, action) => {\r\n        state.cart = action.payload;\r\n        state.cartLoading = false;\r\n        NotificationManager.success(\"Item removed!\");\r\n      })\r\n      .addCase(deleteFromCart.rejected, (state, action) => {\r\n        state.cartLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(createOrder.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n        .addCase(createOrder.fulfilled, (state, action) => {\r\n            state.loading = false;\r\n        })\r\n        .addCase(createOrder.rejected, (state, action) => {\r\n            state.loading = false;\r\n            NotificationManager.error(action.error.message);\r\n        });\r\n  },\r\n});\r\n\r\nexport {\r\n  signup,\r\n  login,\r\n  isLogin,\r\n  editUser,\r\n  addToCart,\r\n    getCart,\r\n  updateProductFromCart,\r\n  deleteFromCart,\r\n    createOrder,\r\n};\r\n\r\nexport const { userLogout, emptyCart } = usersSlice.actions;\r\n\r\nexport default usersSlice.reducer;\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\redux\\slices\\product.js",["370"],"F:\\Java-Project\\ecommerce-frontend\\src\\redux\\slices\\admin.js",["371","372"],"import {\r\n  createSlice,\r\n  createAsyncThunk,\r\n  createEntityAdapter,\r\n} from \"@reduxjs/toolkit\";\r\nimport { AdminAxios, Axios } from \"../../api/instances\";\r\nimport * as Api from \"../../api/endpoints\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { history } from \"../../utils\";\r\n\r\nconst login = createAsyncThunk(\"admin/login\", async ({ email, password }) => {\r\n    const userToken = localStorage.getItem(\"userToken\");\r\n    if (userToken) {\r\n        throw new Error(\"Please logout from the user account first.\");\r\n    }\r\n    try {\r\n    const res = await Axios.post(Api.ADMIN_LOGIN, {\r\n      email,\r\n      password,\r\n    });\r\n    history.push(\"/admin\");\r\n    NotificationManager.success(\"Logged in!\");\r\n    return res.data;\r\n  } catch (error) {\r\n    throw error?.response?.data || error.message;\r\n  }\r\n});\r\n\r\nconst isLogin = createAsyncThunk(\"admin/isLogin\", async () => {\r\n  const token = localStorage.getItem(\"adminToken\");\r\n  if (!token) throw \"ERROR!\";\r\n\r\n  const res = await AdminAxios.get(Api.IS_ADMIN_LOGIN, {\r\n    headers: {\r\n      Authorization: token,\r\n    },\r\n  });\r\n  return res.data;\r\n});\r\n\r\nconst fetchProducts = createAsyncThunk(\"admin/fetchProducts\", async ({ pageNumber, pageSize, sortBy, sortDir }) => {\r\n  const res = await Axios.get(Api.GET_PRODUCTS, {\r\n    params: { pageNumber, pageSize, sortBy, sortDir },\r\n  });\r\n  return { products: res.data.products, total: res.data.totalElements };\r\n});\r\n\r\nconst createProduct = createAsyncThunk(\r\n    \"admin/createProduct\",\r\n    async ({ name, description, file, category, price, quantity, discount, tags }) => {\r\n      try {\r\n        const productName = name;\r\n        const formattedTags = tags.map(tagId => ({ tagId }));\r\n        const data = new FormData();\r\n        data.append(\"categoryId\", category);\r\n        console.log({ productName, description, price, quantity, discount, category, tags: formattedTags });\r\n        data.append(\"product\", new Blob([JSON.stringify({ productName, description, price, quantity, discount, tags: formattedTags })], { type: \"application/json\" }));\r\n        if (file) {\r\n          data.append(\"image\", file);\r\n        }\r\n\r\n        const token = localStorage.getItem(\"adminToken\");\r\n        const res = await AdminAxios.post(Api.CREATE_PRODUCT, data, {\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n            \"Authorization\": token,\r\n          },\r\n        });\r\n        history.push(\"/admin/products\");\r\n        return res.data;\r\n      } catch (error) {\r\n        throw error?.response?.data || error.message;\r\n      }\r\n    }\r\n);\r\n\r\nconst editProduct = createAsyncThunk(\r\n    \"admin/editProduct\",\r\n    async ({ id, name, description, file, category, price, quantity, discount, tags }) => {\r\n      try {\r\n        const productName = name;\r\n        const formattedTags = tags.map(tagId => ({ tagId }));\r\n        const data = new FormData();\r\n        data.append(\"categoryId\", category);\r\n        data.append(\"product\", new Blob([JSON.stringify({ productName, description, price, quantity, discount, tags: formattedTags })], { type: \"application/json\" }));\r\n        if (file) {\r\n          data.append(\"image\", file);\r\n        }\r\n\r\n        const token = localStorage.getItem(\"adminToken\");\r\n        const res = await AdminAxios.patch(Api.UPDATE_PRODUCT(id), data, {\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n            \"Authorization\": token,\r\n          },\r\n        });\r\n        history.push(\"/admin/products\");\r\n        // NotificationManager.success(\"Product updated!\");\r\n        return res.data;\r\n      } catch (error) {\r\n        throw error?.response?.data || error.message;\r\n      }\r\n    }\r\n);\r\n\r\nconst deleteProduct = createAsyncThunk(\"admin/deleteProduct\", async (id) => {\r\n  const token = localStorage.getItem(\"adminToken\");\r\n  const res = await AdminAxios.delete(Api.DELETE_PRODUCT(id),\r\n  {\r\n    headers: {\r\n      \"Authorization\": token,\r\n    }\r\n  });\r\n  console.log(res.data);\r\n  return res.data.productId;\r\n});\r\n\r\nconst fetchCategories = createAsyncThunk(\"admin/fetchCategories\", async () => {\r\n  const res = await Axios.get(Api.GET_CATEGORIES);\r\n  return res.data.categories;\r\n});\r\n\r\nconst createCategory = createAsyncThunk(\r\n  \"admin/createCategory\",\r\n  async ({ categoryName }) => {\r\n    try {\r\n      const token = localStorage.getItem(\"adminToken\");\r\n      const res = await AdminAxios.post(Api.CREATE_CATEGORY, { categoryName }, {\r\n        headers: {\r\n          \"Authorization\": token,\r\n        },\r\n      });\r\n      history.push(\"/admin/categories\");\r\n      NotificationManager.success(\"Category created!\");\r\n      return res.data.category;\r\n    } catch (error) {\r\n      throw error?.response?.data || error.message;\r\n    }\r\n  }\r\n);\r\n\r\nconst editCategory = createAsyncThunk(\r\n  \"admin/editCategory\",\r\n  async ({ id, categoryName }) => {\r\n    try {\r\n      const res = await AdminAxios.patch(Api.UPDATE_CATEGORY(id), { categoryName }, {\r\n        headers: {\r\n          \"Authorization\": localStorage.getItem(\"adminToken\"),\r\n        },\r\n      });\r\n      history.push(\"/admin/categories\");\r\n      NotificationManager.success(\"Category updated!\");\r\n      return res.data.category;\r\n    } catch (error) {\r\n      throw error?.response?.data || error.message;\r\n    }\r\n  }\r\n);\r\n\r\nconst deleteCategory = createAsyncThunk(\"admin/deleteCategory\", async (id) => {\r\n  const res = await AdminAxios.delete(Api.DELETE_CATEGORY(id), {\r\n    headers: {\r\n      \"Authorization\": localStorage.getItem(\"adminToken\"),\r\n    },\r\n  });\r\n  console.log(res.data.categoryId);\r\n  return res.data.categoryId;\r\n});\r\n\r\nconst fetchAdminOrders = createAsyncThunk(\r\n  \"admin/fetchAdminOrders\",\r\n  async () => {\r\n    const res = await AdminAxios.get(Api.ADMIN_ORDERS, {\r\n        headers: {\r\n            \"Authorization\": localStorage.getItem(\"adminToken\"),\r\n        },\r\n    });\r\n    console.log(res.data);\r\n    return res.data.content;\r\n  }\r\n);\r\n\r\nconst fetchAdminOrder = createAsyncThunk(\r\n  \"admin/fetchAdminOrder\",\r\n  async (id) => {\r\n    const res = await AdminAxios.get(Api.ADMIN_ORDER(id), {\r\n        headers: {\r\n            \"Authorization\": localStorage.getItem(\"adminToken\"),\r\n        },\r\n    });\r\n    console.log(res.data);\r\n    return res.data;\r\n  }\r\n);\r\n\r\nconst editAdminOrder = createAsyncThunk(\r\n    \"admin/editAdminOrder\",\r\n    async ({ id, status }) => {\r\n      const data = new FormData();\r\n      data.append(\"status\", status);\r\n\r\n      const res = await AdminAxios.patch(Api.UPDATE_ORDER(id), data, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n          \"Authorization\": localStorage.getItem(\"adminToken\"),\r\n        },\r\n      });\r\n\r\n      NotificationManager.success(\"Order's status updated!\");\r\n      return res.data;\r\n    }\r\n);\r\n\r\nconst fetchTags = createAsyncThunk(\"admin/fetchTags\", async () => {\r\n    const res = await Axios.get(Api.GET_TAGS);\r\n    return res.data.tags;\r\n});\r\n\r\nconst createTag = createAsyncThunk(\r\n    \"admin/createTag\",\r\n    async ({ tagName }) => {\r\n        try {\r\n            const token = localStorage.getItem(\"adminToken\");\r\n            const res = await AdminAxios.post(Api.CREATE_TAG, { tagName }, {\r\n            headers: {\r\n                \"Authorization\": token,\r\n            },\r\n            });\r\n            history.push(\"/admin/tags\");\r\n            NotificationManager.success(\"Tag created!\");\r\n            return res.data;\r\n        } catch (error) {\r\n            throw error?.response?.data || error.message;\r\n        }\r\n    }\r\n  );\r\n\r\nconst editTag = createAsyncThunk(\r\n    \"admin/editTag\",\r\n    async ({ id, tagName }) => {\r\n        try {\r\n            const res = await AdminAxios.patch(Api.UPDATE_TAG(id), { tagName }, {\r\n            headers: {\r\n                \"Authorization\": localStorage.getItem(\"adminToken\"),\r\n            },\r\n            });\r\n            history.push(\"/admin/tags\");\r\n            NotificationManager.success(\"Tag updated!\");\r\n            return res.data;\r\n        } catch (error) {\r\n            throw error?.response?.data || error.message;\r\n        }\r\n    }\r\n);\r\n\r\nconst deleteTag = createAsyncThunk(\"admin/deleteTag\", async (id) => {\r\n    const res = await AdminAxios.delete(Api.DELETE_TAG(id), {\r\n        headers: {\r\n            \"Authorization\": localStorage.getItem(\"adminToken\"),\r\n        },\r\n    });\r\n    return res.data;\r\n});\r\n\r\nconst fetchUsers = createAsyncThunk(\"admin/fetchUsers\", async ({ pageNumber, pageSize, sortBy, sortDir }) => {\r\n    const res = await Axios.get(Api.GET_USERS, {\r\n        params: { pageNumber, pageSize, sortBy, sortDir },\r\n      headers: {\r\n          \"Authorization\": localStorage.getItem(\"adminToken\"),\r\n      }\r\n    });\r\n    console.log(res.data);\r\n    return { users: res.data.users, total: res.data.totalElements };\r\n});\r\n\r\nconst deleteUser = createAsyncThunk(\"admin/deleteUser\", async (id) => {\r\n    const res = await AdminAxios.delete(Api.DELETE_USER(id), {\r\n        headers: {\r\n            \"Authorization\": localStorage.getItem(\"adminToken\"),\r\n        },\r\n    });\r\n    return res.data;\r\n});\r\n\r\nconst createUser = createAsyncThunk(\"admin/createUser\", async ({ firstName, lastName, email, password, roles }) => {\r\n    const data = {\r\n        firstName,\r\n        lastName,\r\n        email,\r\n        password,\r\n        roles\r\n    };\r\n\r\n    const res = await AdminAxios.post(Api.REGISTER_USER, data, {\r\n        headers: {\r\n            \"Authorization\": localStorage.getItem(\"adminToken\"),\r\n        },\r\n    });\r\n    history.push(\"/admin/users\");\r\n    return res.data;\r\n});\r\n\r\nconst initialState = {\r\n  admin: true,\r\n  authLoading: false,\r\n  loading: false,\r\n  products: [],\r\n  contentLoading: false,\r\n  categories: [],\r\n  orders: [],\r\n  tags: [],\r\n  users: [],\r\n  total : 0,\r\n};\r\n\r\nconst adminSlice = createSlice({\r\n  name: \"admin\",\r\n  initialState,\r\n  reducers : {\r\n    adminLogout: (state) => {\r\n        state.admin = false;\r\n        localStorage.removeItem(\"adminToken\");\r\n        NotificationManager.success(\"Logged out!\");\r\n        history.push(\"/admin/login\");\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(login.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.admin = true;\r\n        localStorage.setItem(\"adminToken\", `Bearer ${action.payload.token}`);\r\n        state.authLoading = false;\r\n      })\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(isLogin.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(isLogin.fulfilled, (state, action) => {\r\n        state.admin = true;\r\n        state.loading = false;\r\n      })\r\n      .addCase(isLogin.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.admin = false;\r\n        localStorage.removeItem(\"adminToken\");\r\n      })\r\n      .addCase(fetchProducts.pending, (state, action) => {\r\n        state.contentLoading = true;\r\n      })\r\n      .addCase(fetchProducts.fulfilled, (state, action) => {\r\n        state.products = action.payload.products;\r\n        state.total = action.payload.total;\r\n        state.contentLoading = false;\r\n      })\r\n      .addCase(createProduct.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(createProduct.fulfilled, (state, action) => {\r\n        state.products.push(action.payload);\r\n        state.authLoading = false;\r\n        NotificationManager.success(\"Product created!\");\r\n      })\r\n      .addCase(createProduct.rejected, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(editProduct.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(editProduct.fulfilled, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.success(\"Product updated!\");\r\n      })\r\n      .addCase(editProduct.rejected, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(deleteProduct.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(deleteProduct.fulfilled, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.success(\"Product deleted!\");\r\n        state.products = state.products.filter(\r\n          ({ productId }) => productId !== action.payload\r\n        );\r\n      })\r\n      .addCase(deleteProduct.rejected, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(fetchCategories.pending, (state, action) => {\r\n        state.contentLoading = true;\r\n      })\r\n      .addCase(fetchCategories.fulfilled, (state, action) => {\r\n        state.categories = action.payload;\r\n        state.contentLoading = false;\r\n      })\r\n      .addCase(fetchCategories.rejected, (state, action) => {\r\n        state.contentLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(createCategory.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(createCategory.fulfilled, (state, action) => {\r\n        state.authLoading = false;\r\n      })\r\n      .addCase(createCategory.rejected, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(editCategory.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(editCategory.fulfilled, (state, action) => {\r\n        state.authLoading = false;\r\n      })\r\n      .addCase(editCategory.rejected, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(deleteCategory.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(deleteCategory.fulfilled, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.success(\"Category deleted!\");\r\n        state.categories = state.categories.filter(\r\n          ({ categoryId }) => categoryId !== action.payload\r\n        );\r\n      })\r\n      .addCase(deleteCategory.rejected, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(fetchAdminOrders.pending, (state, action) => {\r\n        state.contentLoading = true;\r\n      })\r\n      .addCase(fetchAdminOrders.fulfilled, (state, action) => {\r\n        state.orders = action.payload;\r\n        state.contentLoading = false;\r\n      })\r\n      .addCase(fetchAdminOrder.pending, (state, action) => {\r\n        state.contentLoading = true;\r\n      })\r\n      .addCase(fetchAdminOrder.fulfilled, (state, action) => {\r\n        console.log(action.payload);\r\n        state.order = action.payload;\r\n        state.contentLoading = false;\r\n      })\r\n      .addCase(editAdminOrder.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(editAdminOrder.fulfilled, (state, action) => {\r\n        state.order = action.payload;\r\n        state.authLoading = false;\r\n      })\r\n        .addCase(editAdminOrder.rejected, (state, action) => {\r\n            state.authLoading = false;\r\n            NotificationManager.error(action.error.message);\r\n        })\r\n        .addCase(fetchTags.pending, (state, action) => {\r\n            state.contentLoading = true;\r\n        })\r\n        .addCase(fetchTags.fulfilled, (state, action) => {\r\n            state.tags = action.payload;\r\n            state.contentLoading = false;\r\n        })\r\n        .addCase(createTag.pending, (state, action) => {\r\n            state.authLoading = true;\r\n        })\r\n        .addCase(createTag.fulfilled, (state, action) => {\r\n            state.authLoading = false;\r\n        })\r\n        .addCase(createTag.rejected, (state, action) => {\r\n            state.authLoading = false;\r\n            NotificationManager.error(action.error.message);\r\n        })\r\n        .addCase(editTag.pending, (state, action) => {\r\n            state.authLoading = true;\r\n        })\r\n        .addCase(editTag.fulfilled, (state, action) => {\r\n            state.authLoading = false;\r\n        })\r\n        .addCase(editTag.rejected, (state, action) => {\r\n            state.authLoading = false;\r\n            NotificationManager.error(action.error.message);\r\n        })\r\n        .addCase(deleteTag.pending, (state, action) => {\r\n            state.authLoading = true;\r\n        })\r\n        .addCase(deleteTag.fulfilled, (state, action) => {\r\n            state.authLoading = false;\r\n            NotificationManager.success(\"Tag deleted!\");\r\n            state.tags = state.tags.filter(\r\n                ({ tagId }) => tagId !== action.payload.tagId\r\n            );\r\n        })\r\n        .addCase(deleteTag.rejected, (state, action) => {\r\n            state.authLoading = false;\r\n            NotificationManager.error(action.error.message);\r\n        })\r\n        .addCase(fetchUsers.pending, (state, action) => {\r\n            state.contentLoading = true;\r\n        })\r\n        .addCase(fetchUsers.fulfilled, (state, action) => {\r\n            state.users = action.payload.users;\r\n            state.total = action.payload.total;\r\n            console.log(action.payload);\r\n            state.contentLoading = false;\r\n        })\r\n        .addCase(fetchUsers.rejected, (state, action) => {\r\n            state.contentLoading = false;\r\n            NotificationManager.error(action.error.message);\r\n        })\r\n        .addCase(deleteUser.pending, (state, action) => {\r\n            state.authLoading = true;\r\n        })\r\n        .addCase(deleteUser.fulfilled, (state, action) => {\r\n            state.authLoading = false;\r\n            NotificationManager.success(\"User deleted!\");\r\n            state.users = state.users.filter(\r\n                ({ userId }) => userId !== action.payload\r\n            );\r\n        })\r\n        .addCase(deleteUser.rejected, (state, action) => {\r\n            state.authLoading = false;\r\n            NotificationManager.error(action.error.message);\r\n        })\r\n        .addCase(createUser.pending, (state, action) => {\r\n            state.authLoading = true;\r\n        })\r\n        .addCase(createUser.fulfilled, (state, action) => {\r\n            state.authLoading = false;\r\n            NotificationManager.success(\"User created!\");\r\n        })\r\n        .addCase(createUser.rejected, (state, action) => {\r\n            state.authLoading = false;\r\n            NotificationManager.error(action.error.message);\r\n        });\r\n  },\r\n});\r\n\r\nexport {\r\n  login,\r\n  isLogin,\r\n  fetchProducts,\r\n  createProduct,\r\n  editProduct,\r\n  deleteProduct,\r\n  fetchCategories,\r\n  createCategory,\r\n  editCategory,\r\n  deleteCategory,\r\n  fetchAdminOrders,\r\n  fetchAdminOrder,\r\n  editAdminOrder,\r\n    fetchTags,\r\n    createTag,\r\n    editTag,\r\n    deleteTag,\r\n    fetchUsers,\r\n    deleteUser,\r\n    createUser,\r\n};\r\n\r\nexport default adminSlice.reducer;\r\n\r\nexport const { adminLogout } = adminSlice.actions;","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Footer\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\App\\Client.js",["373"],"import { useEffect } from \"react\";\r\nimport { Header } from \"../components/Header\";\r\nimport { Route, Switch, useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { isLogin } from \"../redux/slices/user\";\r\nimport { clientRoutes } from \"../routes/clientRoutes\";\r\nimport { Loader } from \"../components/Loader/\";\r\n\r\nexport const Client = () => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state) => state.users.loading);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [history.location.pathname]);\r\n\r\n  useEffect(() => {\r\n    dispatch(isLogin());\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <Header />\r\n          <Switch>\r\n            {clientRoutes.map((route) => (\r\n              <Route {...route} />\r\n            ))}\r\n          </Switch>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\App\\Admin.js",["374"],"import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { isLogin } from \"../redux/slices/admin\";\r\nimport { Route, Switch, useHistory } from \"react-router-dom\";\r\nimport { adminRoutes } from \"../routes/adminRoutes\";\r\nimport { AdminHeader } from \"../components/AdminHeader/\";\r\nimport { Loader } from \"../components/Loader/\";\r\n\r\nexport const Admin = () => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state) => state.admin.loading);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [history.location.pathname]);\r\n\r\n  useEffect(() => {\r\n    dispatch(isLogin());\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <AdminHeader />\r\n\r\n          <Switch>\r\n            {adminRoutes.map((route) => (\r\n              <Route {...route} />\r\n            ))}\r\n          </Switch>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\api\\endpoints.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Footer\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Loader\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\routes\\adminRoutes.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\AdminHeader\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\routes\\clientRoutes.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Checkout\\index.js",["375","376","377"],"import { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport {} from \"@material-ui/icons\";\r\nimport { useStyles } from \"./style\";\r\nimport { Payment } from \"./Payment\";\r\nimport { Shipping } from \"./Shipping\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { createPaymentIntent } from \"../../../redux/slices/order\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { UserAxios } from \"../../../api/instances\";\r\nimport * as Api from \"../../../api/endpoints\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { emptyCart } from \"../../../redux/slices/user\";\r\nimport { withUserAuth } from \"../../../hoc/withUserAuth\";\r\nimport { Loader } from \"../../../components/Loader/\";\r\n\r\nconst stripePromise = loadStripe(\r\n  \"pk_test_51HY7L7IuPlgS5Yt8yUJxodsQVLzRImwyhBycWSTi4njwihcuahtqN2dUAAwaYDG2ZlErSFZ2eFHwM18uYlIRVKvF00BK4ecBy6\"\r\n);\r\n\r\nconst getSteps = () => [\"Shipping Address\", \"Payment Info\"];\r\n\r\nconst Checkout = withUserAuth(true)((props) => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const contentLoading = useSelector((state) => state.orders.contentLoading);\r\n  const clientSecret = useSelector((state) => state.orders.clientSecret);\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [skipped, setSkipped] = useState(new Set());\r\n  const steps = getSteps();\r\n  const [country, setCountry] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n  const [address1, setAddress1] = useState(\"\");\r\n  const [address2, setAddress2] = useState(\"\");\r\n  const [zipCode, setZipCode] = useState(\"\");\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const [processing, setProcessing] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    dispatch(createPaymentIntent());\r\n  }, []);\r\n\r\n  const changeCountryHandler = (e) => setCountry(e.target.value);\r\n  const changeCityHandler = (e) => setCity(e.target.value);\r\n  const changeAddress1Handler = (e) => setAddress1(e.target.value);\r\n  const changeAddress2Handler = (e) => setAddress2(e.target.value);\r\n  const changeZipCodeHandler = (e) => {\r\n    if (isNaN(Number(e.target.value))) return;\r\n    setZipCode(e.target.value.trim());\r\n  };\r\n\r\n  const isStepSkipped = (step) => skipped.has(step);\r\n\r\n  const nextStepHandler = () => {\r\n    const newSkipped = [...skipped.values(), activeStep];\r\n    setSkipped(new Set([...newSkipped]));\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  };\r\n\r\n  const paymentHandler = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      setProcessing(true);\r\n\r\n      const payload = await stripe.confirmCardPayment(clientSecret, {\r\n        payment_method: {\r\n          card: elements.getElement(CardElement),\r\n        },\r\n      });\r\n\r\n      if (payload.error) {\r\n        setProcessing(false);\r\n        return NotificationManager.error(payload.error.message);\r\n      }\r\n      const res = await UserAxios.post(Api.CREATE_ORDER_STRIPE, {\r\n        country,\r\n        city,\r\n        address1,\r\n        address2,\r\n        zipCode,\r\n      });\r\n\r\n      dispatch(emptyCart());\r\n\r\n      NotificationManager.success(\"Order placed!\");\r\n\r\n      history.replace(\"/\");\r\n      setProcessing(false);\r\n    } catch (error) {\r\n      NotificationManager.error(error.message);\r\n    }\r\n    setProcessing(false);\r\n  };\r\n\r\n  const getStepContent = (step) => {\r\n    switch (step) {\r\n      case 0:\r\n        return (\r\n          <Shipping\r\n            country={country}\r\n            city={city}\r\n            address1={address1}\r\n            address2={address2}\r\n            zipCode={zipCode}\r\n            changeCountryHandler={changeCountryHandler}\r\n            changeCityHandler={changeCityHandler}\r\n            changeAddress1Handler={changeAddress1Handler}\r\n            changeAddress2Handler={changeAddress2Handler}\r\n            changeZipCodeHandler={changeZipCodeHandler}\r\n            nextStepHandler={nextStepHandler}\r\n          />\r\n        );\r\n      case 1:\r\n        return (\r\n          <Payment paymentHandler={paymentHandler} processing={processing} />\r\n        );\r\n      default:\r\n        return <p>No Content</p>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      {contentLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <Stepper activeStep={activeStep} className={classes.stepper}>\r\n            {steps.map((label, index) => {\r\n              let stepProps = {};\r\n              if (isStepSkipped(index)) {\r\n                stepProps.completed = true;\r\n              }\r\n\r\n              return (\r\n                <Step key={label} {...stepProps}>\r\n                  <StepLabel>{label}</StepLabel>\r\n                </Step>\r\n              );\r\n            })}\r\n          </Stepper>\r\n\r\n          {getStepContent(activeStep)}\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n});\r\n\r\nconst Component = () => (\r\n  <Elements stripe={stripePromise}>\r\n    <Checkout />\r\n  </Elements>\r\n);\r\n\r\nexport { Component as Checkout };\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\pages\\Orders\\index.js",["378","379"],"import { useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Card,\r\n  Grid,\r\n  Chip,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport {} from \"@material-ui/icons\";\r\nimport { useStyles } from \"./style\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchOrders } from \"../../../redux/slices/order\";\r\nimport { fetchAdminOrders } from \"../../../redux/slices/admin\";\r\nimport moment from \"moment\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Loader } from \"../../../components/Loader/\";\r\n\r\nexport const Orders = ({ admin }) => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const orders = useSelector((state) =>\r\n    admin ? state.admin.orders : state.orders.orders\r\n  );\r\n  const contentLoading = useSelector((state) =>\r\n    admin ? state.admin.contentLoading : state.orders.contentLoading\r\n  );\r\n  const adminExist = localStorage.getItem(\"adminToken\");\r\n  const userExist = localStorage.getItem(\"userToken\");\r\n\r\n  useEffect(() => {\r\n    if (admin && !adminExist) {\r\n      history.replace(\"/admin/login\");\r\n    }\r\n    if (!admin && !userExist) {\r\n      history.replace(\"/\");\r\n    }\r\n  }, [userExist, adminExist]);\r\n\r\n  useEffect(() => {\r\n    dispatch(admin ? fetchAdminOrders() : fetchOrders());\r\n  }, []);\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      {contentLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <Typography className={classes.heading} variant=\"h3\">\r\n            Orders\r\n          </Typography>\r\n\r\n          {orders.length ? null : <Typography>No orders.</Typography>}\r\n\r\n          <Grid container spacing={4}>\r\n            {orders.map((order) => {\r\n              const orderItems = order?.orderItems?.reduce(\r\n                (total, item) => item.quantity + total,\r\n                0\r\n              );\r\n\r\n              return (\r\n                <Grid key={order.orderId} item md={4} sm={6} xs={12}>\r\n                  <Card className={classes.card}>\r\n                    <Typography>\r\n                      <span>ID</span> <Chip label={order.orderId} size=\"small\" />\r\n                    </Typography>\r\n                    <Typography>\r\n                      <span>Products</span> {order.orderItems.length}\r\n                    </Typography>\r\n                    <Typography>\r\n                      <span>Items</span> {orderItems}\r\n                    </Typography>\r\n                    <Typography>\r\n                      <span>Date</span> {moment(order.orderDate).fromNow()}\r\n                    </Typography>\r\n                    <Typography>\r\n                      <span>Price</span> ${order.totalAmount}\r\n                    </Typography>\r\n                    <Typography>\r\n                      <span>Status</span>{\" \"}\r\n                      <Chip\r\n                        style={{ color: \"white\" }}\r\n                        label={order.orderStatus}\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                      />\r\n                    </Typography>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"primary\"\r\n                      size=\"small\"\r\n                      onClick={() =>\r\n                        admin\r\n                          ? history.push(`/admin/order/${order.orderId}`)\r\n                          : history.push(`/order/${order.orderId}`)\r\n                      }\r\n                    >\r\n                      Details\r\n                    </Button>\r\n                  </Card>\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\pages\\Order\\index.js",["380","381"],"import { useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Grid,\r\n  Paper,\r\n  Chip,\r\n  Card,\r\n  CardActionArea,\r\n  CardContent,\r\n  CardMedia,\r\n  Button,\r\n  CardActions,\r\n  CircularProgress,\r\n  Box,\r\n} from \"@material-ui/core\";\r\nimport {} from \"@material-ui/icons\";\r\nimport { useStyles } from \"./style\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams, Link, useHistory, Route } from \"react-router-dom\";\r\nimport { fetchOrder, deleteOrder } from \"../../../redux/slices/order\";\r\nimport { fetchAdminOrder, editAdminOrder } from \"../../../redux/slices/admin\";\r\nimport moment from \"moment\";\r\nimport { AddReview } from \"../../../components/AddReview/\";\r\nimport { Loader } from \"../../../components/Loader/\";\r\n\r\nconst showStatus = (status) => {\r\n  switch (status) {\r\n    case \"PENDING\":\r\n      return \"SHIPPED\";\r\n    case \"SHIPPED\":\r\n      return \"DELIVERED\";\r\n    case \"DELIVERED\":\r\n      return \"ORDERED\";\r\n    default:\r\n      return \"CANCELLED\";\r\n  }\r\n};\r\n\r\nexport const Order = ({ admin }) => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const contentLoading = useSelector((state) =>\r\n    admin ? state.admin.contentLoading : state.orders.contentLoading\r\n  );\r\n  const order = useSelector((state) =>\r\n    admin ? state.admin.order : state.orders.order\r\n  );\r\n  const { id } = useParams();\r\n  const items = order?.orderItems?.reduce((total, item) => item.quantity + total, 0);\r\n  const buttonLoading = useSelector((state) => state.admin.authLoading);\r\n  const deleteLoading = useSelector((state) => state.orders.buttonLoading);\r\n  const adminExist = localStorage.getItem(\"adminToken\");\r\n  const userExist = localStorage.getItem(\"userToken\");\r\n\r\n  useEffect(() => {\r\n    if (admin && !adminExist) {\r\n      history.replace(\"/admin/login\");\r\n    }\r\n    if (!admin && !userExist) {\r\n      history.replace(\"/\");\r\n    }\r\n  }, [userExist, adminExist]);\r\n\r\n  useEffect(() => {\r\n    dispatch(admin ? fetchAdminOrder(id) : fetchOrder(id));\r\n  }, [id, history.location.pathname]);\r\n\r\n  console.log(order);\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      {contentLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <Typography className={classes.heading} variant=\"h3\">\r\n            Order Details\r\n          </Typography>\r\n\r\n          <Grid container spacing={4}>\r\n            <Grid item md={6} xs={12}>\r\n              <Paper className={classes.paper}>\r\n                <Typography>\r\n                  <span>Order ID</span> <Chip label={order?.orderId} size=\"small\" />\r\n                </Typography>\r\n                <Typography>\r\n                  <span>Products</span> {order?.orderItems.length}\r\n                </Typography>\r\n                <Typography>\r\n                  <span>Items</span> {items}\r\n                </Typography>\r\n                <Typography>\r\n                  <span>Date</span> {moment(order?.date).fromNow()}\r\n                </Typography>\r\n                <Typography>\r\n                  <span>Price</span> ${order?.totalAmount}\r\n                </Typography>\r\n                <Typography>\r\n                  <span>Status</span>{\" \"}\r\n                  <Chip\r\n                    label={order?.orderStatus}\r\n                    size=\"small\"\r\n                    style={{ color: \"white\", fontWeight: \"bold\" }}\r\n                    color=\"primary\"\r\n                  />\r\n                </Typography>\r\n                {admin ? (\r\n                  <>\r\n                    {order?.orderStatus === \"DELIVERED\" ? null : (\r\n                      <Typography>\r\n                        <span>Change Status:</span>\r\n                      </Typography>\r\n                    )}\r\n                    <Button\r\n                      disabled={order?.orderStatus === \"ORDERED\" || buttonLoading}\r\n                      variant=\"outlined\"\r\n                      color=\"primary\"\r\n                      onClick={() =>\r\n                        dispatch(\r\n                          editAdminOrder({\r\n                            id,\r\n                            status: showStatus(order?.orderStatus),\r\n                          })\r\n                        )\r\n                      }\r\n                      endIcon={\r\n                        buttonLoading ? <CircularProgress size={20} /> : null\r\n                      }\r\n                    >\r\n                      {showStatus(order?.orderStatus)}\r\n                    </Button>\r\n                  </>\r\n                ) : null}\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item md={6} xs={12}>\r\n              <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">Shipping Address</Typography>\r\n                <Typography>{order?.shippingAddress?.country}</Typography>\r\n                <Typography>{order?.shippingAddress?.city}</Typography>\r\n                <Typography>{order?.shippingAddress?.address1}</Typography>\r\n                <Typography>{order?.shippingAddress?.address2}</Typography>\r\n                <Typography>{order?.shippingAddress?.zipCode}</Typography>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Typography variant=\"h4\" className={classes.heading}>\r\n            Products\r\n          </Typography>\r\n\r\n          <Grid container spacing={5}>\r\n            {order?.orderItems?.map((item) => {\r\n              let isAddReview = false;\r\n              const reviewExist = item.product.reviews?.find(\r\n                (review) => review.order === order.orderItemId\r\n              );\r\n\r\n              if (order.orderStatus === \"DELIVERED\" && !reviewExist && !admin) {\r\n                isAddReview = true;\r\n              }\r\n\r\n              return (\r\n                <Grid key={item.orderItemId} item xs={12} sm={6} lg={4}>\r\n                  <Card className={classes.product}>\r\n                    <CardActionArea\r\n                      onClick={() =>\r\n                        history.push(`/product/${item.product.productId}`)\r\n                      }\r\n                    >\r\n                      <CardMedia\r\n                        style={{ height: \"250px\", backgroundSize: \"contain\" }}\r\n                        className={classes.media}\r\n                        image={item.product.image}\r\n                        title={item.product.productName}\r\n                      />\r\n                    </CardActionArea>\r\n\r\n                    <CardContent>\r\n                      <Typography\r\n                        className={classes.productName}\r\n                        variant=\"h5\"\r\n                        component={Link}\r\n                        to={`/product/${item.product.productId}`}\r\n                      >\r\n                        {item.product.productName}\r\n                      </Typography>\r\n                      <Typography>\r\n                        <span>Quantity</span> {item.quantity}\r\n                      </Typography>\r\n                      <Typography>\r\n                        <span>Price</span> ${item.product.price}\r\n                      </Typography>\r\n                      <Typography>\r\n                        <span>Total Price</span> $\r\n                        {item.quantity * item.product.price}\r\n                      </Typography>\r\n\r\n                      {!admin && reviewExist ? (\r\n                        <Button variant=\"contained\" disabled>\r\n                          Already reviewed!\r\n                        </Button>\r\n                      ) : null}\r\n                    </CardContent>\r\n\r\n                    {isAddReview && (\r\n                      <CardActions>\r\n                        <Button\r\n                          style={{ color: \"white\" }}\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={() =>\r\n                            history.push(\r\n                              `/order/${id}/review/${item.product._id}`\r\n                            )\r\n                          }\r\n                        >\r\n                          Add Review\r\n                        </Button>\r\n                      </CardActions>\r\n                    )}\r\n                  </Card>\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n\r\n          {!admin && order?.orderStatus === \"DELIVERED\" ? (\r\n            <Box marginTop={4}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                size=\"large\"\r\n                disabled={deleteLoading}\r\n                onClick={() => dispatch(deleteOrder(id))}\r\n                endIcon={deleteLoading ? <CircularProgress size={20} /> : null}\r\n              >\r\n                Delete order\r\n              </Button>\r\n            </Box>\r\n          ) : null}\r\n        </>\r\n      )}\r\n\r\n      <Route\r\n        path={`/order/${id}/review/:productId`}\r\n        render={() => <AddReview order={id} />}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\ProductPage\\index.js",["382","383","384","385","386","387"],"import { useEffect } from \"react\";\r\nimport { useStyles, BigTooltip } from \"./style\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Typography,\r\n  Button,\r\n  Badge,\r\n  Table,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Paper,\r\n  Avatar,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { Rating } from \"@material-ui/lab\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchProduct } from \"../../../redux/slices/product\";\r\nimport moment from \"moment\";\r\nimport { addToCart } from \"../../../redux/slices/user\";\r\nimport { Review } from \"../../../components/Review/\";\r\nimport { Loader } from \"../../../components/Loader/\";\r\n\r\nexport const ProductPage = () => {\r\n  const dispatch = useDispatch();\r\n  const product = useSelector((state) => state.products.product);\r\n  const cartLoading = useSelector((state) => state.users.cartLoading);\r\n  const loading = useSelector((state) => state.products.loading);\r\n  const { id } = useParams();\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchProduct(id));\r\n  }, []);\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" className={classes.root}>\r\n      {loading || !product ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <Grid container spacing={3}>\r\n            <Grid item md={6} xs={12}>\r\n              <div className={classes.img}>\r\n                <img src={product.image} />\r\n              </div>\r\n            </Grid>\r\n\r\n            <Grid item md={6} xs={12}>\r\n              <Typography variant=\"h3\" className={classes.heading}>\r\n                {product.productName}\r\n              </Typography>\r\n\r\n              {/*<BigTooltip*/}\r\n              {/*  title={`${product.rating?.toFixed(1) || \"No\"} Rating`}*/}\r\n              {/*  placement=\"top-start\"*/}\r\n              {/*  arrow*/}\r\n              {/*>*/}\r\n              {/*  <div className={classes.rating}>*/}\r\n              {/*    <Rating precision=\"0.1\" value={product.rating} readOnly />*/}\r\n              {/*    <Typography>({product.reviews.length} Reviews)</Typography>*/}\r\n              {/*  </div>*/}\r\n              {/*</BigTooltip>*/}\r\n\r\n              <Typography\r\n                variant=\"h5\"\r\n                color=\"primary\"\r\n                className={classes.price}\r\n              >\r\n                ${product.price}\r\n              </Typography>\r\n              <Typography>{product.description}</Typography>\r\n              <Badge\r\n                badgeContent=\"Out of stock\"\r\n                color=\"primary\"\r\n                className={classes.badge}\r\n                invisible={product.quantity}\r\n              >\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  disabled={!product.quantity || cartLoading}\r\n                  onClick={() => dispatch(addToCart(product.productId))}\r\n                  endIcon={\r\n                    cartLoading ? (\r\n                      <CircularProgress size={20} color=\"primary\" />\r\n                    ) : null\r\n                  }\r\n                >\r\n                  Add to cart\r\n                </Button>\r\n              </Badge>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <TableContainer component={Paper} className={classes.tableContainer}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Product Details</TableCell>\r\n                  <TableCell></TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n\r\n              <TableBody>\r\n                <TableRow>\r\n                  <TableCell component=\"th\">Category</TableCell>\r\n                  <TableCell>{product.category.categoryName}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell component=\"th\">Created</TableCell>\r\n                  <TableCell>{moment(product.createdAt).fromNow()}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell component=\"th\">Quantity in stock</TableCell>\r\n                  <TableCell>{product.quantity}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell component=\"th\">Discount</TableCell>\r\n                  <TableCell>{product.discount || 0 }%</TableCell>\r\n                </TableRow>\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n\r\n          {/*<Typography variant=\"h5\">*/}\r\n          {/*  Reviews ({product.reviews.length})*/}\r\n          {/*</Typography>*/}\r\n          {/*{product.reviews.map((review) => (*/}\r\n          {/*  <Review key={review._id} review={review} />*/}\r\n          {/*))}*/}\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\CategoryProducts\\index.js",["388"],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Home\\index.js",["389","390"],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\UserForm\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Shop\\index.js",["391"],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\pages\\Orders\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\pages\\Order\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Checkout\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Checkout\\Payment.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Checkout\\Shipping.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\hoc\\withUserAuth.js",["392"],"import { useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const withUserAuth = (auth) => (WrappedComponent) => {\r\n  return (props) => {\r\n    const { replace } = useHistory();\r\n    const user = useSelector((state) => state.users.user);\r\n\r\n    useEffect(() => {\r\n      if (auth && !user) replace(\"/\");\r\n      if (!auth && user) replace(\"/\");\r\n    }, [user]);\r\n\r\n    return <WrappedComponent {...props} />;\r\n  };\r\n};\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\components\\AddReview\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\CategoryProducts\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Shop\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\hoc\\withAdminAuth.js",["393"],"import { useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const withAdminAuth = (auth) => (WrappedComponent) => {\r\n  return (props) => {\r\n    const { replace } = useHistory();\r\n    const admin = useSelector((state) => state.admin.admin);\r\n\r\n    useEffect(() => {\r\n      if (auth && !admin) replace(\"/admin/login\");\r\n      if (!auth && admin) replace(\"/admin\");\r\n    }, [admin]);\r\n\r\n    return <WrappedComponent {...props} />;\r\n  };\r\n};\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Home\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\UserForm\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Products\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Filter\\index.js",["394"],"import { useState, useEffect } from \"react\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport {} from \"@material-ui/icons\";\r\nimport { useStyles } from \"./style\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { applyFilter } from \"../../redux/slices/product\";\r\n\r\nexport const Filter = (props) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const categories = useSelector((state) => state.categories.categories);\r\n  const [filter, setFilter] = useState(\"All\");\r\n\r\n  useEffect(() => {\r\n    dispatch(applyFilter(\"All\"));\r\n  }, []);\r\n\r\n  const changeFilterHandler = (e) => {\r\n    setFilter(e.target.value);\r\n    dispatch(applyFilter(e.target.value));\r\n  };\r\n\r\n  return (\r\n    <TextField\r\n      select\r\n      label=\"Filter\"\r\n      value={filter}\r\n      onChange={changeFilterHandler}\r\n      className={classes.textField}\r\n    >\r\n      <MenuItem value=\"All\">All</MenuItem>\r\n      {categories.map((category) => (\r\n        <MenuItem value={category.categoryName} key={category.categoryName}>\r\n          {category.categoryName}\r\n        </MenuItem>\r\n      ))}\r\n    </TextField>\r\n  );\r\n};\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Hero\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\AddReview\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Search\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\ProductPage\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Review\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Cart\\index.js",["395"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Table,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Paper,\r\n  IconButton,\r\n  Button,\r\n  CircularProgress,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  DeleteOutlineOutlined,\r\n  AddOutlined,\r\n  RemoveOutlined,\r\n} from \"@material-ui/icons\";\r\nimport { useStyles } from \"./style\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport {\r\n  updateProductFromCart,\r\n  deleteFromCart,\r\n  getCart, createOrder,\r\n} from \"../../../redux/slices/user\";\r\nimport { withUserAuth } from \"../../../hoc/withUserAuth\";\r\n\r\nexport const Cart = withUserAuth(true)((props) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const loading = useSelector((state) => state.users.cartLoading);\r\n  const cart = useSelector((state) => state.users.cart);\r\n  const [quantities, setQuantities] = useState({});\r\n\r\n  useEffect(() => {\r\n    dispatch(getCart());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (cart?.cartItems) {\r\n      const initialQuantities = cart.cartItems.reduce((acc, item) => {\r\n        acc[item.product.productId] = item.quantity;\r\n        return acc;\r\n      }, {});\r\n      setQuantities(initialQuantities);\r\n    }\r\n  }, [cart]);\r\n\r\n  const handleQuantityChange = (productId, newQuantity) => {\r\n    setQuantities((prevQuantities) => ({\r\n      ...prevQuantities,\r\n      [productId]: newQuantity,\r\n    }));\r\n    dispatch(updateProductFromCart({ id: productId, quantity: newQuantity }));\r\n  };\r\n\r\n  const handleProceedToCheckout = () => {\r\n    dispatch(createOrder()).then(() => {\r\n        // history.push(\"/checkout\");\r\n    });\r\n  };\r\n\r\n  return (\r\n      <Container maxWidth=\"lg\" className={classes.root}>\r\n        <Typography className={classes.heading} variant=\"h3\">\r\n          Cart\r\n        </Typography>\r\n\r\n        {!cart?.totalPrice ? (\r\n            <>\r\n              <Typography>\r\n                You haven't added any product to the cart yet!\r\n              </Typography>\r\n              <Typography component={Link} to=\"/shop\">\r\n                Go and do some shopping!\r\n              </Typography>\r\n            </>\r\n        ) : (\r\n            <>\r\n              <TableContainer component={Paper} className={classes.tableContainer}>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Product</TableCell>\r\n                      <TableCell>Price</TableCell>\r\n                      <TableCell>Discount</TableCell>\r\n                      <TableCell>Quantity</TableCell>\r\n                      <TableCell>Total</TableCell>\r\n                      <TableCell></TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n\r\n                  <TableBody>\r\n                    {cart?.cartItems?.map((item) => (\r\n                        <TableRow key={item.product.productId}>\r\n                          <TableCell>\r\n                            <Typography\r\n                                component={Link}\r\n                                to={`/product/${item.product.productId}`}\r\n                            >\r\n                              {item.product.productName}\r\n                            </Typography>\r\n                          </TableCell>\r\n                          <TableCell>{item.product.price}đ</TableCell>\r\n                          <TableCell>{item.product.discount}%</TableCell>\r\n                          <TableCell style={{ minWidth: \"150px\" }}>\r\n                            {loading ? (\r\n                                <CircularProgress size={35} />\r\n                            ) : (\r\n                                <>\r\n                                  <IconButton\r\n                                      size=\"small\"\r\n                                      onClick={() =>\r\n                                          handleQuantityChange(\r\n                                              item.product.productId,\r\n                                              quantities[item.product.productId] + 1\r\n                                          )\r\n                                      }\r\n                                  >\r\n                                    <AddOutlined />\r\n                                  </IconButton>{\" \"}\r\n                                  <TextField\r\n                                      type=\"number\"\r\n                                      value={quantities[item.product.productId]}\r\n                                      onChange={(e) =>\r\n                                          handleQuantityChange(\r\n                                              item.product.productId,\r\n                                              Number(e.target.value)\r\n                                          )\r\n                                      }\r\n                                      inputProps={{ min: 1 }}\r\n                                  />{\" \"}\r\n                                  <IconButton\r\n                                      size=\"small\"\r\n                                      onClick={() =>\r\n                                          handleQuantityChange(\r\n                                              item.product.productId,\r\n                                              quantities[item.product.productId] - 1\r\n                                          )\r\n                                      }\r\n                                      disabled={quantities[item.product.productId] <= 1}\r\n                                  >\r\n                                    <RemoveOutlined />\r\n                                  </IconButton>\r\n                                </>\r\n                            )}\r\n                          </TableCell>\r\n                          <TableCell>{item.quantity * item.specialPrice}đ</TableCell>\r\n                          <TableCell>\r\n                            {loading ? (\r\n                                <CircularProgress size={35} />\r\n                            ) : (\r\n                                <IconButton\r\n                                    onClick={() =>\r\n                                        dispatch(deleteFromCart(item.product.productId))\r\n                                    }\r\n                                >\r\n                                  <DeleteOutlineOutlined />\r\n                                </IconButton>\r\n                            )}\r\n                          </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                    <TableRow>\r\n                      <TableCell component=\"th\">\r\n                        Subtotal: {cart?.totalPrice}đ\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n\r\n              <Button\r\n                  className={classes.btn}\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  size=\"large\"\r\n                  // component={Link}\r\n                  // to=\"/checkout\"\r\n                  onClick={handleProceedToCheckout}\r\n              >\r\n                Proceed to checkout\r\n              </Button>\r\n            </>\r\n        )}\r\n      </Container>\r\n  );\r\n});","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\EditProfile\\index.js",["396"],"import { useState } from \"react\";\r\nimport {\r\n  Container,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Paper,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport {} from \"@material-ui/icons\";\r\nimport { useStyles } from \"../Login/style\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { editUser } from \"../../../redux/slices/user\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { withUserAuth } from \"../../../hoc/withUserAuth\";\r\n\r\nexport const EditProfile = withUserAuth(true)((props) => {\r\n  const classes = useStyles();\r\n  const user = useSelector((state) => state.users.user);\r\n  const [name, setName] = useState(user?.name);\r\n  const [email, setEmail] = useState(user?.email);\r\n  const [password, setPassword] = useState(user?.password);\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state) => state.users.authLoading);\r\n\r\n  const changeNameHandler = (e) => setName(e.target.value);\r\n  const changeEmailHandler = (e) => setEmail(e.target.value);\r\n  const changePasswordHandler = (e) => setPassword(e.target.value);\r\n\r\n  const editHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(editUser({ name, email, password }));\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" className={classes.root}>\r\n      <Typography variant=\"h3\" className={classes.heading}>\r\n        Edit Profile\r\n      </Typography>\r\n\r\n      <Paper component=\"form\" className={classes.form} onSubmit={editHandler}>\r\n        <TextField\r\n          label=\"Name\"\r\n          className={classes.textField}\r\n          value={name}\r\n          onChange={changeNameHandler}\r\n        />\r\n        <TextField\r\n          label=\"Email\"\r\n          type=\"email\"\r\n          className={classes.textField}\r\n          value={email}\r\n          onChange={changeEmailHandler}\r\n        />\r\n        <TextField\r\n          label=\"Password\"\r\n          type=\"password\"\r\n          className={classes.textField}\r\n          value={password}\r\n          onChange={changePasswordHandler}\r\n        />\r\n        <Button\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          style={{ color: \"white\" }}\r\n          disabled={loading}\r\n          endIcon={\r\n            loading ? <CircularProgress size={20} color=\"primary\" /> : null\r\n          }\r\n        >\r\n          Edit\r\n        </Button>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n});\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Profile\\index.js",["397"],"import {\r\n  Container,\r\n  Typography,\r\n  Table,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Paper,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport {} from \"@material-ui/icons\";\r\nimport { useStyles } from \"./style\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport { withUserAuth } from \"../../../hoc/withUserAuth\";\r\n\r\nexport const Profile = withUserAuth(true)((props) => {\r\n  const classes = useStyles();\r\n  const { push } = useHistory();\r\n  const profile = useSelector((state) => state.users.user);\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Typography variant=\"h3\" className={classes.heading}>\r\n        Your Profile\r\n      </Typography>\r\n\r\n      <TableContainer component={Paper} className={classes.tableContainer}>\r\n        <Table>\r\n          <TableBody>\r\n            <TableRow>\r\n              <TableCell component=\"th\">Last Name</TableCell>\r\n              <TableCell>{profile?.lastName}</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell component=\"th\">First Name</TableCell>\r\n              <TableCell>{profile?.firstName}</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell component=\"th\">Email</TableCell>\r\n              <TableCell>{profile?.email}</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>\r\n                <Button\r\n                  onClick={() => push(\"/edit-profile\")}\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                >\r\n                  Edit\r\n                </Button>\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Container>\r\n  );\r\n});\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Signup\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Hero\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Filter\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Product\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Review\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\AdminHeader\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\SearchPage\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Login\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\CategoryForm\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Login\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Profile\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Cart\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Categories\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\ProductForm\\index.js",["398","399"],"import { useEffect, useState } from \"react\";\r\nimport {\r\n    Container,\r\n    Typography,\r\n    TextField,\r\n    MenuItem,\r\n    Button,\r\n    InputAdornment,\r\n    CircularProgress,\r\n    Select,\r\n    Chip,\r\n    FormControl,\r\n    InputLabel,\r\n    OutlinedInput,\r\n} from \"@material-ui/core\";\r\nimport { CameraAltOutlined } from \"@material-ui/icons\";\r\nimport { useStyles } from \"./style\";\r\nimport { AdminAxios, Axios } from \"../../../api/instances\";\r\nimport * as Api from \"../../../api/endpoints\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { createProduct, editProduct } from \"../../../redux/slices/admin\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { withAdminAuth } from \"../../../hoc/withAdminAuth\";\r\nimport { Loader } from \"../../../components/Loader/\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst ProductFormSchema = Yup.object().shape({\r\n    name: Yup.string()\r\n        .min(3, \"Product name should have at least 3 characters\")\r\n        .required(\"Product name is required\"),\r\n    description: Yup.string()\r\n        .min(6, \"Product description should have at least 6 characters\")\r\n        .required(\"Product description is required\"),\r\n    category: Yup.string().required(\"Category is required\"),\r\n    price: Yup.number().required(\"Price is required\"),\r\n    quantity: Yup.number().required(\"Quantity is required\"),\r\n    discount: Yup.number().min(0, \"Discount cannot be negative\"),\r\n    tags: Yup.array().min(1, \"At least one tag is required\"),\r\n});\r\n\r\nexport const ProductForm = withAdminAuth(true)(({ edit }) => {\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const [productLoading, setProductLoading] = useState(false);\r\n    const loading = useSelector((state) => state.admin.authLoading);\r\n    const classes = useStyles();\r\n    const [categories, setCategories] = useState([]);\r\n    const [tags, setTags] = useState([]);\r\n    const [src, setSrc] = useState(\"\");\r\n    const [file, setFile] = useState(null);\r\n    const [productData, setProductData] = useState({\r\n        productName: \"\",\r\n        description: \"\",\r\n        category: \"\",\r\n        price: \"\",\r\n        quantity: \"\",\r\n        discount: 0,\r\n        tags: [],\r\n        image : \"\",\r\n    });\r\n\r\n    const updateProductData = ({\r\n                                   productName,\r\n                                   description,\r\n                                   category,\r\n                                   image,\r\n                                   price,\r\n                                   quantity,\r\n                                   discount,\r\n                                   tags,\r\n                               }) => {\r\n        setProductData({\r\n            productName,\r\n            description,\r\n            category: category.categoryId,\r\n            price,\r\n            quantity,\r\n            discount,\r\n            tags: tags.map(tag => tag.tagId),\r\n            image,\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (edit) {\r\n                setProductLoading(true);\r\n                const productResponse = await AdminAxios.get(Api.ADMIN_PRODUCT(id));\r\n                console.log(productResponse.data);\r\n                updateProductData(productResponse.data);\r\n                setProductLoading(false);\r\n            }\r\n        })();\r\n\r\n        (async () => {\r\n            const categoriesResponse = await Axios.get(Api.GET_CATEGORIES);\r\n            setCategories(categoriesResponse.data.categories);\r\n        })();\r\n\r\n        (async () => {\r\n            const tagsResponse = await Axios.get(Api.GET_TAGS);\r\n            setTags(tagsResponse.data.tags);\r\n        })();\r\n    }, []);\r\n\r\n    const changeImageHandler = async (e) => {\r\n        const file = e?.target?.files[0];\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => {\r\n                setFile(file);\r\n                setSrc(reader.result);\r\n            };\r\n        }\r\n    };\r\n\r\n    const createProductHandler = (values) => {\r\n        if (edit) {\r\n            dispatch(\r\n                editProduct({\r\n                    id,\r\n                    ...values,\r\n                    file,\r\n                })\r\n            );\r\n        } else {\r\n            dispatch(\r\n                createProduct({\r\n                    ...values,\r\n                    file,\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\">\r\n            {productLoading ? (\r\n                <Loader />\r\n            ) : (\r\n                <>\r\n                    <Typography variant=\"h3\" className={classes.heading}>\r\n                        {edit ? \"Edit\" : \"Create\"} Product\r\n                    </Typography>\r\n                    <Formik\r\n                        initialValues={{\r\n                            name: edit ? productData.productName : \"\",\r\n                            description: edit ? productData.description : \"\",\r\n                            category: edit ? productData.category : \"\",\r\n                            price: edit ? productData.price : \"\",\r\n                            quantity: edit ? productData.quantity : \"\",\r\n                            discount: edit ? productData.discount : 0,\r\n                            tags: edit ? productData.tags : [],\r\n                            image: edit ? productData.image : \"\",\r\n                        }}\r\n                        validationSchema={ProductFormSchema}\r\n                        onSubmit={createProductHandler}\r\n                    >\r\n                        {({ values, handleChange, setFieldValue, errors, touched }) => (\r\n                            <Form className={classes.form}>\r\n                                <Field\r\n                                    as={TextField}\r\n                                    label=\"Name\"\r\n                                    name=\"name\"\r\n                                    className={classes.textField}\r\n                                    value={values.name}\r\n                                    onChange={handleChange}\r\n                                    error={touched.name && Boolean(errors.name)}\r\n                                    helperText={touched.name && errors.name}\r\n                                />\r\n                                <Field\r\n                                    as={TextField}\r\n                                    className={classes.textField}\r\n                                    label=\"Description\"\r\n                                    name=\"description\"\r\n                                    multiline\r\n                                    rows={4}\r\n                                    value={values.description}\r\n                                    onChange={handleChange}\r\n                                    error={touched.description && Boolean(errors.description)}\r\n                                    helperText={touched.description && errors.description}\r\n                                />\r\n                                <Field\r\n                                    as={TextField}\r\n                                    select\r\n                                    label=\"Category\"\r\n                                    name=\"category\"\r\n                                    value={values.category}\r\n                                    onChange={handleChange}\r\n                                    error={touched.category && Boolean(errors.category)}\r\n                                    helperText={touched.category && errors.category}\r\n                                >\r\n                                    {categories.map(({categoryId, categoryName}) => (\r\n                                        <MenuItem key={categoryId} value={categoryId}>\r\n                                            {categoryName}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Field>\r\n                                <FormControl className={classes.textField}>\r\n                                    <InputLabel>Tags</InputLabel>\r\n                                    <Select\r\n                                        multiple\r\n                                        name=\"tags\"\r\n                                        value={values.tags}\r\n                                        onChange={(e) => setFieldValue(\"tags\", e.target.value)}\r\n                                        input={<OutlinedInput label=\"Tags\"/>}\r\n                                        renderValue={(selected) => (\r\n                                            <div className={classes.chips}>\r\n                                                {selected.map((value) => (\r\n                                                    <Chip key={value}\r\n                                                          label={tags.find(tag => tag.tagId === value)?.tagName || ''}\r\n                                                          className={classes.chip}/>\r\n                                                ))}\r\n                                            </div>\r\n                                        )}\r\n                                        error={touched.tags && Boolean(errors.tags)}\r\n                                    >\r\n                                        {tags.map(({tagId, tagName}) => (\r\n                                            <MenuItem key={tagId} value={tagId}>\r\n                                                {tagName}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                    </Select>\r\n                                    {touched.tags && errors.tags && (\r\n                                        <div className={classes.error}>{errors.tags}</div>\r\n                                    )}\r\n                                </FormControl>\r\n                                <input\r\n                                    type=\"file\"\r\n                                    id=\"fileInput\"\r\n                                    accept=\"image/png, image/jpg, image/jpeg, image/webp\"\r\n                                    hidden\r\n                                    onChange={changeImageHandler}\r\n                                />\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    style={{color: \"white\"}}\r\n                                    component=\"label\"\r\n                                    htmlFor=\"fileInput\"\r\n                                    endIcon={<CameraAltOutlined/>}\r\n                                    size=\"small\"\r\n                                >\r\n                                    Upload Image\r\n                                </Button>\r\n                                <div className={classes.img}>\r\n                                    <img src={src || values.image} alt=\"Preview image\"/>\r\n                                </div>\r\n                                <Field\r\n                                    as={TextField}\r\n                                    type=\"number\"\r\n                                    label=\"Price\"\r\n                                    name=\"price\"\r\n                                    value={values.price}\r\n                                    onChange={handleChange}\r\n                                    InputProps={{\r\n                                        startAdornment: (\r\n                                            <InputAdornment position=\"start\">VNĐ</InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                    error={touched.price && Boolean(errors.price)}\r\n                                    helperText={touched.price && errors.price}\r\n                                />\r\n                                <Field\r\n                                    as={TextField}\r\n                                    type=\"number\"\r\n                                    label=\"Quantity\"\r\n                                    name=\"quantity\"\r\n                                    value={values.quantity}\r\n                                    onChange={handleChange}\r\n                                    error={touched.quantity && Boolean(errors.quantity)}\r\n                                    helperText={touched.quantity && errors.quantity}\r\n                                />\r\n                                <Field\r\n                                    as={TextField}\r\n                                    type=\"number\"\r\n                                    label=\"Discount\"\r\n                                    name=\"discount\"\r\n                                    value={values.discount}\r\n                                    onChange={handleChange}\r\n                                    InputProps={{\r\n                                        startAdornment: (\r\n                                            <InputAdornment position=\"start\">%</InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                    error={touched.discount && Boolean(errors.discount)}\r\n                                    helperText={touched.discount && errors.discount}\r\n                                />\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    style={{color: \"white\"}}\r\n                                    size=\"large\"\r\n                                    disabled={loading}\r\n                                    endIcon={\r\n                                        loading ? <CircularProgress size={20} color=\"primary\"/> : null\r\n                                    }\r\n                                >\r\n                                    {edit ? \"Edit\" : \"Create\"}\r\n                                </Button>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n});","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Products\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Home\\index.js",["400","401"],"import {\r\n  Container,\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Paper,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\nimport {} from \"@material-ui/icons\";\r\nimport { useStyles } from \"./style\";\r\nimport { withAdminAuth } from \"../../../hoc/withAdminAuth\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const Home = withAdminAuth(true)((props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <Container maxWidth=\"lg\" className={classes.container}>\r\n        <Grid container spacing={3}>\r\n          <Grid item md={3}>\r\n            <Paper className={classes.paper}>\r\n              <Typography component={Link} to=\"/admin/products\" variant=\"h6\">\r\n                Products\r\n              </Typography>\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item md={3}>\r\n            <Paper className={classes.paper}>\r\n              <Typography component={Link} to=\"/admin/categories\" variant=\"h6\">\r\n                Categories\r\n              </Typography>\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item md={3}>\r\n            <Paper className={classes.paper}>\r\n              <Typography component={Link} to=\"/admin/orders\" variant=\"h6\">\r\n                Orders\r\n              </Typography>\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item md={3}>\r\n            <Paper className={classes.paper}>\r\n              <Typography component={Link} to=\"/admin/tags\" variant=\"h6\">\r\n                Tags\r\n              </Typography>\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item md={3}>\r\n            <Paper className={classes.paper}>\r\n              <Typography component={Link} to=\"/admin/users\" variant=\"h6\">\r\n                Users\r\n              </Typography>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n});\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Login\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Product\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Users\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Tags\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\TagForm\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\SearchPage\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\CategoryForm\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Products\\Row.js",["402"],"import { useState, useRef } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Box,\r\n  Typography,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Paper,\r\n  IconButton, CircularProgress\r\n} from \"@material-ui/core\";\r\nimport {\r\n  KeyboardArrowDown,\r\n  KeyboardArrowUp,\r\n  EditOutlined,\r\n  DeleteOutlineOutlined,\r\n} from \"@material-ui/icons\";\r\nimport { useStyles } from \"./style\";\r\nimport moment from \"moment\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { deleteProduct } from \"../../../redux/slices/admin\";\r\n\r\nexport const Row = ({ product }) => {\r\n  const { push } = useHistory();\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state) => state.admin.authLoading);\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const collapseRef = useRef(null);\r\n\r\n  // const handleClose = () => setOpenReviews(false);\r\n  // const handleOpen = () => setOpenReviews(true);\r\n\r\n  const deleteProductHandler = () => {\r\n    dispatch(deleteProduct(product.productId));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TableRow key={product.productId} className={classes.row}>\r\n        <TableCell>\r\n          <IconButton size=\"small\" onClick={() => setOpen(!open)}>\r\n            {open ? <KeyboardArrowUp /> : <KeyboardArrowDown />}\r\n          </IconButton>\r\n        </TableCell>\r\n        <TableCell>\r\n          <div className={classes.img}>\r\n            <img src={product.image} />\r\n          </div>\r\n        </TableCell>\r\n        <TableCell>{product.productName}</TableCell>\r\n        <TableCell>{product.price}đ</TableCell>\r\n        <TableCell>{product.quantity}</TableCell>\r\n        <TableCell>{product.specialPrice}đ</TableCell>\r\n        <TableCell>{product?.category?.categoryName || \"No category\"}</TableCell>\r\n        <TableCell>\r\n          {loading ? (\r\n            <CircularProgress size={20} color=\"primary\" />\r\n          ) : (\r\n            <>\r\n              <IconButton\r\n                onClick={() => push(`/admin/edit-product/${product.productId}`)}\r\n                color=\"primary\"\r\n                size=\"small\"\r\n                style={{ marginRight: \"10px\" }}\r\n              >\r\n                <EditOutlined />\r\n              </IconButton>\r\n              <IconButton\r\n                color=\"secondary\"\r\n                size=\"small\"\r\n                onClick={deleteProductHandler}\r\n              >\r\n                <DeleteOutlineOutlined />\r\n              </IconButton>\r\n            </>\r\n          )}\r\n        </TableCell>\r\n      </TableRow>\r\n\r\n        <TableRow>\r\n          <TableCell colSpan={8} style={{ paddingBottom: 0, paddingTop: 0 }}>\r\n            <Collapse in={open} timeout=\"auto\" unmountOnExit ref={collapseRef}>\r\n              <Box marginTop={2} paddingBottom={2}>\r\n                <Typography variant=\"h5\">More Detail</Typography>\r\n                <Table\r\n                    size=\"small\"\r\n                    style={{ marginTop: \"10px\" }}\r\n                    component={Paper}\r\n                >\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Description</TableCell>\r\n                      <TableCell>Category</TableCell>\r\n                      <TableCell>Created</TableCell>\r\n                      <TableCell>Updated</TableCell>\r\n                      <TableCell>Discount</TableCell>\r\n                      <TableCell></TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n\r\n                  <TableBody>\r\n                    <TableCell>{product.description}</TableCell>\r\n                    <TableCell>{product.category.categoryName}</TableCell>\r\n                    <TableCell>{moment(product?.createdAt).fromNow()}</TableCell>\r\n                    <TableCell>\r\n                      {moment(product?.updatedAt).fromNow()}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {product.discount ? `${product.discount}%` : \"No discount\"}\r\n                    </TableCell>\r\n                  </TableBody>\r\n                </Table>\r\n              </Box>\r\n            </Collapse>\r\n          </TableCell>\r\n        </TableRow>\r\n      </>\r\n  );\r\n};\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Products\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\ProductForm\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Categories\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Home\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Tags\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\TagForm\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Users\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Users\\Row.js",["403","404","405"],"import { useState, useRef } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Box,\r\n  Typography,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Paper,\r\n  IconButton,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  KeyboardArrowDown,\r\n  KeyboardArrowUp,\r\n  EditOutlined,\r\n  DeleteOutlineOutlined,\r\n} from \"@material-ui/icons\";\r\nimport { useStyles } from \"./style\";\r\nimport moment from \"moment\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { deleteUser } from \"../../../redux/slices/admin\";\r\n\r\nexport const Row = ({ user }) => {\r\n  const { push } = useHistory();\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state) => state.admin.authLoading);\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const collapseRef = useRef(null);\r\n\r\n  const deleteUserHandler = () => {\r\n    dispatch(deleteUser(user.userId));\r\n  };\r\n\r\n  const getFullName = (firstName, lastName) => {\r\n    if (!firstName && !lastName) return \"Unknown\";\r\n    if (!firstName) return lastName;\r\n    if (!lastName) return firstName;\r\n    return `${firstName} ${lastName}`;\r\n  };\r\n\r\n  return (\r\n      <>\r\n        <TableRow key={user.userId} className={classes.row}>\r\n          <TableCell>\r\n            <IconButton size=\"small\" onClick={() => setOpen(!open)}>\r\n              {open ? <KeyboardArrowUp /> : <KeyboardArrowDown />}\r\n            </IconButton>\r\n          </TableCell>\r\n          <TableCell>{user.userId}</TableCell>\r\n          <TableCell>{user.email}</TableCell>\r\n          <TableCell>\r\n            {user.roles && user.roles.length > 0 ? (\r\n                user.roles.map((role) => role.roleName).join(\", \")\r\n            ) : (\r\n                \"No roles for this user\"\r\n            )}\r\n          </TableCell>\r\n          <TableCell>{getFullName(user.firstName, user.lastName)}</TableCell>\r\n          <TableCell>\r\n            {loading ? (\r\n                <CircularProgress size={20} color=\"primary\" />\r\n            ) : (\r\n                <>\r\n                  {/*<IconButton*/}\r\n                  {/*    onClick={() => push(`/admin/edit-user/${user.userId}`)}*/}\r\n                  {/*    color=\"primary\"*/}\r\n                  {/*    size=\"small\"*/}\r\n                  {/*    style={{ marginRight: \"10px\" }}*/}\r\n                  {/*>*/}\r\n                  {/*  <EditOutlined />*/}\r\n                  {/*</IconButton>*/}\r\n                  <IconButton\r\n                      color=\"secondary\"\r\n                      size=\"small\"\r\n                      onClick={deleteUserHandler}\r\n                  >\r\n                    <DeleteOutlineOutlined />\r\n                  </IconButton>\r\n                </>\r\n            )}\r\n          </TableCell>\r\n        </TableRow>\r\n\r\n        <TableRow>\r\n          <TableCell colSpan={6} style={{ paddingBottom: 0, paddingTop: 0 }}>\r\n            <Collapse in={open} timeout=\"auto\" unmountOnExit ref={collapseRef}>\r\n              <Box marginTop={2} paddingBottom={2}>\r\n                <Typography variant=\"h5\">More Detail</Typography>\r\n                <Table size=\"small\" style={{ marginTop: \"10px\" }} component={Paper}>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>First name</TableCell>\r\n                      <TableCell>Last name</TableCell>\r\n                      <TableCell>Mobile number</TableCell>\r\n                      <TableCell>Address</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <TableCell>{user?.firstName}</TableCell>\r\n                      <TableCell>{user?.lastName}</TableCell>\r\n                      <TableCell>{user?.mobileNumber}</TableCell>\r\n                      <TableCell>\r\n                        {user.address && user.address.length > 0 ? (\r\n                            user.address.map((address) => (\r\n                                <div key={address.addressId}>{address.addressDetail}</div>\r\n                            ))\r\n                        ) : (\r\n                            \"No addresses available\"\r\n                        )}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </Box>\r\n            </Collapse>\r\n          </TableCell>\r\n        </TableRow>\r\n      </>\r\n  );\r\n};","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Header\\index.js",["406"],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Header\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Sidebar\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Sidebar\\style.js",[],{"ruleId":"407","replacedBy":"408"},{"ruleId":"409","replacedBy":"410"},{"ruleId":"411","severity":1,"message":"412","line":27,"column":40,"nodeType":"413","endLine":27,"endColumn":42,"suggestions":"414"},{"ruleId":"415","severity":1,"message":"416","line":50,"column":15,"nodeType":"417","messageId":"418","endLine":50,"endColumn":30},{"ruleId":"419","severity":1,"message":"420","line":7,"column":7,"nodeType":"421","messageId":"422","endLine":7,"endColumn":19},{"ruleId":"419","severity":1,"message":"423","line":4,"column":3,"nodeType":"421","messageId":"422","endLine":4,"endColumn":22},{"ruleId":"415","severity":1,"message":"416","line":31,"column":15,"nodeType":"417","messageId":"418","endLine":31,"endColumn":30},{"ruleId":"411","severity":1,"message":"424","line":20,"column":6,"nodeType":"413","endLine":20,"endColumn":8,"suggestions":"425"},{"ruleId":"411","severity":1,"message":"424","line":20,"column":6,"nodeType":"413","endLine":20,"endColumn":8,"suggestions":"426"},{"ruleId":"419","severity":1,"message":"427","line":7,"column":3,"nodeType":"421","messageId":"422","endLine":7,"endColumn":13},{"ruleId":"411","severity":1,"message":"424","line":52,"column":6,"nodeType":"413","endLine":52,"endColumn":8,"suggestions":"428"},{"ruleId":"419","severity":1,"message":"429","line":86,"column":13,"nodeType":"421","messageId":"422","endLine":86,"endColumn":16},{"ruleId":"411","severity":1,"message":"430","line":39,"column":6,"nodeType":"413","endLine":39,"endColumn":29,"suggestions":"431"},{"ruleId":"411","severity":1,"message":"432","line":43,"column":6,"nodeType":"413","endLine":43,"endColumn":8,"suggestions":"433"},{"ruleId":"411","severity":1,"message":"430","line":64,"column":6,"nodeType":"413","endLine":64,"endColumn":29,"suggestions":"434"},{"ruleId":"411","severity":1,"message":"432","line":68,"column":6,"nodeType":"413","endLine":68,"endColumn":37,"suggestions":"435"},{"ruleId":"419","severity":1,"message":"436","line":2,"column":21,"nodeType":"421","messageId":"422","endLine":2,"endColumn":31},{"ruleId":"419","severity":1,"message":"437","line":16,"column":3,"nodeType":"421","messageId":"422","endLine":16,"endColumn":9},{"ruleId":"419","severity":1,"message":"438","line":19,"column":10,"nodeType":"421","messageId":"422","endLine":19,"endColumn":16},{"ruleId":"419","severity":1,"message":"439","line":25,"column":10,"nodeType":"421","messageId":"422","endLine":25,"endColumn":16},{"ruleId":"411","severity":1,"message":"440","line":38,"column":6,"nodeType":"413","endLine":38,"endColumn":8,"suggestions":"441"},{"ruleId":"442","severity":1,"message":"443","line":49,"column":17,"nodeType":"444","endLine":49,"endColumn":44},{"ruleId":"411","severity":1,"message":"424","line":34,"column":6,"nodeType":"413","endLine":34,"endColumn":73,"suggestions":"445"},{"ruleId":"419","severity":1,"message":"446","line":2,"column":41,"nodeType":"421","messageId":"422","endLine":2,"endColumn":44},{"ruleId":"411","severity":1,"message":"424","line":24,"column":8,"nodeType":"413","endLine":24,"endColumn":21,"suggestions":"447"},{"ruleId":"411","severity":1,"message":"424","line":30,"column":6,"nodeType":"413","endLine":30,"endColumn":55,"suggestions":"448"},{"ruleId":"411","severity":1,"message":"449","line":13,"column":8,"nodeType":"413","endLine":13,"endColumn":14,"suggestions":"450"},{"ruleId":"411","severity":1,"message":"449","line":13,"column":8,"nodeType":"413","endLine":13,"endColumn":15,"suggestions":"451"},{"ruleId":"411","severity":1,"message":"424","line":16,"column":6,"nodeType":"413","endLine":16,"endColumn":8,"suggestions":"452"},{"ruleId":"419","severity":1,"message":"453","line":35,"column":9,"nodeType":"421","messageId":"422","endLine":35,"endColumn":16},{"ruleId":"419","severity":1,"message":"454","line":14,"column":10,"nodeType":"421","messageId":"422","endLine":14,"endColumn":20},{"ruleId":"419","severity":1,"message":"455","line":6,"column":3,"nodeType":"421","messageId":"422","endLine":6,"endColumn":12},{"ruleId":"411","severity":1,"message":"456","line":105,"column":8,"nodeType":"413","endLine":105,"endColumn":10,"suggestions":"457"},{"ruleId":"458","severity":1,"message":"459","line":249,"column":37,"nodeType":"444","endLine":249,"endColumn":89},{"ruleId":"419","severity":1,"message":"460","line":3,"column":3,"nodeType":"421","messageId":"422","endLine":3,"endColumn":9},{"ruleId":"419","severity":1,"message":"461","line":4,"column":3,"nodeType":"421","messageId":"422","endLine":4,"endColumn":10},{"ruleId":"442","severity":1,"message":"443","line":51,"column":13,"nodeType":"444","endLine":51,"endColumn":40},{"ruleId":"419","severity":1,"message":"462","line":18,"column":3,"nodeType":"421","messageId":"422","endLine":18,"endColumn":15},{"ruleId":"419","severity":1,"message":"463","line":22,"column":8,"nodeType":"421","messageId":"422","endLine":22,"endColumn":14},{"ruleId":"419","severity":1,"message":"464","line":28,"column":11,"nodeType":"421","messageId":"422","endLine":28,"endColumn":15},{"ruleId":"411","severity":1,"message":"424","line":47,"column":6,"nodeType":"413","endLine":47,"endColumn":8,"suggestions":"465"},"no-native-reassign",["466"],"no-negated-in-lhs",["467"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["468"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-unused-vars","'initialState' is assigned a value but never used.","Identifier","unusedVar","'createEntityAdapter' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["469"],["470"],"'Typography' is defined but never used.",["471"],"'res' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'admin' and 'history'. Either include them or remove the dependency array.",["472"],"React Hook useEffect has missing dependencies: 'admin' and 'dispatch'. Either include them or remove the dependency array.",["473"],["474"],["475"],"'BigTooltip' is defined but never used.","'Avatar' is defined but never used.","'Rating' is defined but never used.","'Review' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["476"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["477"],"'Box' is defined but never used.",["478"],["479"],"React Hook useEffect has a missing dependency: 'replace'. Either include it or remove the dependency array.",["480"],["481"],["482"],"'history' is assigned a value but never used.","'useHistory' is defined but never used.","'TableHead' is defined but never used.","React Hook useEffect has missing dependencies: 'edit' and 'id'. Either include them or remove the dependency array.",["483"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'EditOutlined' is defined but never used.","'moment' is defined but never used.","'push' is assigned a value but never used.",["484"],"no-global-assign","no-unsafe-negation",{"desc":"485","fix":"486"},{"desc":"487","fix":"488"},{"desc":"487","fix":"489"},{"desc":"487","fix":"490"},{"desc":"491","fix":"492"},{"desc":"493","fix":"494"},{"desc":"491","fix":"495"},{"desc":"496","fix":"497"},{"desc":"498","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},{"desc":"504","fix":"505"},{"desc":"506","fix":"507"},{"desc":"508","fix":"509"},{"desc":"487","fix":"510"},{"desc":"511","fix":"512"},{"desc":"487","fix":"513"},"Update the dependencies array to be: [history]",{"range":"514","text":"515"},"Update the dependencies array to be: [dispatch]",{"range":"516","text":"517"},{"range":"518","text":"517"},{"range":"519","text":"517"},"Update the dependencies array to be: [userExist, adminExist, admin, history]",{"range":"520","text":"521"},"Update the dependencies array to be: [admin, dispatch]",{"range":"522","text":"523"},{"range":"524","text":"521"},"Update the dependencies array to be: [id, history.location.pathname, dispatch, admin]",{"range":"525","text":"526"},"Update the dependencies array to be: [dispatch, id]",{"range":"527","text":"528"},"Update the dependencies array to be: [id, page, rowsPerPage, sortBy, sortDir, searchQuery, categoryName, dispatch]",{"range":"529","text":"530"},"Update the dependencies array to be: [dispatch, searchQuery]",{"range":"531","text":"532"},"Update the dependencies array to be: [page, rowsPerPage, sortBy, sortDir, searchQuery, dispatch]",{"range":"533","text":"534"},"Update the dependencies array to be: [replace, user]",{"range":"535","text":"536"},"Update the dependencies array to be: [admin, replace]",{"range":"537","text":"538"},{"range":"539","text":"517"},"Update the dependencies array to be: [edit, id]",{"range":"540","text":"541"},{"range":"542","text":"517"},[805,807],"[history]",[664,666],"[dispatch]",[673,675],[2067,2069],[1192,1215],"[userExist, adminExist, admin, history]",[1306,1308],"[admin, dispatch]",[1922,1945],[2038,2069],"[id, history.location.pathname, dispatch, admin]",[1121,1123],"[dispatch, id]",[1720,1787],"[id, page, rowsPerPage, sortBy, sortDir, searchQuery, categoryName, dispatch]",[1074,1087],"[dispatch, searchQuery]",[1517,1566],"[page, rowsPerPage, sortBy, sortDir, searchQuery, dispatch]",[427,433],"[replace, user]",[448,455],"[admin, replace]",[587,589],[3699,3701],"[edit, id]",[1376,1378]]