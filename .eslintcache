[{"F:\\Java-Project\\ecommerce-frontend\\src\\index.js":"1","F:\\Java-Project\\ecommerce-frontend\\src\\redux\\store.js":"2","F:\\Java-Project\\ecommerce-frontend\\src\\App\\App.js":"3","F:\\Java-Project\\ecommerce-frontend\\src\\api\\instances.js":"4","F:\\Java-Project\\ecommerce-frontend\\src\\utils.js":"5","F:\\Java-Project\\ecommerce-frontend\\src\\redux\\slices\\category.js":"6","F:\\Java-Project\\ecommerce-frontend\\src\\redux\\slices\\product.js":"7","F:\\Java-Project\\ecommerce-frontend\\src\\redux\\slices\\order.js":"8","F:\\Java-Project\\ecommerce-frontend\\src\\redux\\slices\\user.js":"9","F:\\Java-Project\\ecommerce-frontend\\src\\redux\\slices\\admin.js":"10","F:\\Java-Project\\ecommerce-frontend\\src\\routes\\appRoutes.js":"11","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Footer\\index.js":"12","F:\\Java-Project\\ecommerce-frontend\\src\\api\\endpoints.js":"13","F:\\Java-Project\\ecommerce-frontend\\src\\App\\Admin.js":"14","F:\\Java-Project\\ecommerce-frontend\\src\\App\\Client.js":"15","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Footer\\style.js":"16","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Loader\\index.js":"17","F:\\Java-Project\\ecommerce-frontend\\src\\routes\\clientRoutes.js":"18","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\pages\\Orders\\index.js":"19","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\pages\\Order\\index.js":"20","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Checkout\\index.js":"21","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\ProductPage\\index.js":"22","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\CategoryProducts\\index.js":"23","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Home\\index.js":"24","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\pages\\Order\\style.js":"25","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\pages\\Orders\\style.js":"26","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Checkout\\Payment.js":"27","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Checkout\\Shipping.js":"28","F:\\Java-Project\\ecommerce-frontend\\src\\components\\AddReview\\index.js":"29","F:\\Java-Project\\ecommerce-frontend\\src\\hoc\\withUserAuth.js":"30","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Checkout\\style.js":"31","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Home\\style.js":"32","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Filter\\index.js":"33","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\CategoryProducts\\style.js":"34","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Search\\index.js":"35","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\ProductPage\\style.js":"36","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Products\\index.js":"37","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Hero\\index.js":"38","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Review\\index.js":"39","F:\\Java-Project\\ecommerce-frontend\\src\\components\\AddReview\\style.js":"40","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Cart\\index.js":"41","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\EditProfile\\index.js":"42","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Profile\\index.js":"43","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Login\\index.js":"44","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Signup\\index.js":"45","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Filter\\style.js":"46","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Hero\\style.js":"47","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Review\\style.js":"48","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Product\\index.js":"49","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Shop\\index.js":"50","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\SearchPage\\index.js":"51","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Cart\\style.js":"52","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Login\\style.js":"53","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Profile\\style.js":"54","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Shop\\style.js":"55","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Product\\style.js":"56","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\SearchPage\\style.js":"57","F:\\Java-Project\\ecommerce-frontend\\src\\routes\\adminRoutes.js":"58","F:\\Java-Project\\ecommerce-frontend\\src\\components\\AdminHeader\\index.js":"59","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Header\\index.js":"60","F:\\Java-Project\\ecommerce-frontend\\src\\components\\AdminHeader\\style.js":"61","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Products\\index.js":"62","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\ProductForm\\index.js":"63","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Home\\index.js":"64","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Categories\\index.js":"65","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\CategoryForm\\index.js":"66","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Login\\index.js":"67","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Header\\style.js":"68","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Sidebar\\index.js":"69","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Products\\Row.js":"70","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\ProductForm\\style.js":"71","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Home\\style.js":"72","F:\\Java-Project\\ecommerce-frontend\\src\\hoc\\withAdminAuth.js":"73","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Products\\style.js":"74","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Categories\\style.js":"75","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\CategoryForm\\style.js":"76","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Sidebar\\style.js":"77","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Products\\Reviews.js":"78"},{"size":1031,"mtime":1733028914783,"results":"79","hashOfConfig":"80"},{"size":513,"mtime":1733028914792,"results":"81","hashOfConfig":"80"},{"size":1081,"mtime":1733028914779,"results":"82","hashOfConfig":"80"},{"size":599,"mtime":1733028914779,"results":"83","hashOfConfig":"80"},{"size":305,"mtime":1733028914792,"results":"84","hashOfConfig":"80"},{"size":717,"mtime":1733048103546,"results":"85","hashOfConfig":"80"},{"size":4602,"mtime":1733050028017,"results":"86","hashOfConfig":"80"},{"size":2407,"mtime":1733028914792,"results":"87","hashOfConfig":"80"},{"size":6574,"mtime":1733028914792,"results":"88","hashOfConfig":"80"},{"size":10947,"mtime":1733075711235,"results":"89","hashOfConfig":"80"},{"size":255,"mtime":1733028914792,"results":"90","hashOfConfig":"80"},{"size":675,"mtime":1733028914779,"results":"91","hashOfConfig":"80"},{"size":1881,"mtime":1733072449864,"results":"92","hashOfConfig":"80"},{"size":974,"mtime":1733028914775,"results":"93","hashOfConfig":"80"},{"size":959,"mtime":1733028914779,"results":"94","hashOfConfig":"80"},{"size":414,"mtime":1733028914779,"results":"95","hashOfConfig":"80"},{"size":282,"mtime":1733028914779,"results":"96","hashOfConfig":"80"},{"size":1861,"mtime":1733028914792,"results":"97","hashOfConfig":"80"},{"size":3618,"mtime":1733028914791,"results":"98","hashOfConfig":"80"},{"size":8790,"mtime":1733028914791,"results":"99","hashOfConfig":"80"},{"size":5202,"mtime":1733028914787,"results":"100","hashOfConfig":"80"},{"size":4603,"mtime":1733028914787,"results":"101","hashOfConfig":"80"},{"size":3513,"mtime":1733050041360,"results":"102","hashOfConfig":"80"},{"size":1543,"mtime":1733039553095,"results":"103","hashOfConfig":"80"},{"size":664,"mtime":1733028914791,"results":"104","hashOfConfig":"80"},{"size":327,"mtime":1733028914791,"results":"105","hashOfConfig":"80"},{"size":1963,"mtime":1733028914787,"results":"106","hashOfConfig":"80"},{"size":2039,"mtime":1733028914787,"results":"107","hashOfConfig":"80"},{"size":2359,"mtime":1733028914779,"results":"108","hashOfConfig":"80"},{"size":494,"mtime":1733028914783,"results":"109","hashOfConfig":"80"},{"size":1259,"mtime":1733028914787,"results":"110","hashOfConfig":"80"},{"size":262,"mtime":1733028914787,"results":"111","hashOfConfig":"80"},{"size":1143,"mtime":1733028914779,"results":"112","hashOfConfig":"80"},{"size":170,"mtime":1733028914787,"results":"113","hashOfConfig":"80"},{"size":1067,"mtime":1733028914783,"results":"114","hashOfConfig":"80"},{"size":1075,"mtime":1733028914787,"results":"115","hashOfConfig":"80"},{"size":366,"mtime":1733049182163,"results":"116","hashOfConfig":"80"},{"size":56190,"mtime":1733028914779,"results":"117","hashOfConfig":"80"},{"size":765,"mtime":1733028914783,"results":"118","hashOfConfig":"80"},{"size":216,"mtime":1733028914779,"results":"119","hashOfConfig":"80"},{"size":4569,"mtime":1733028914783,"results":"120","hashOfConfig":"80"},{"size":2366,"mtime":1733028914787,"results":"121","hashOfConfig":"80"},{"size":1593,"mtime":1733028914787,"results":"122","hashOfConfig":"80"},{"size":2244,"mtime":1733028914787,"results":"123","hashOfConfig":"80"},{"size":2527,"mtime":1733028914787,"results":"124","hashOfConfig":"80"},{"size":364,"mtime":1733028914779,"results":"125","hashOfConfig":"80"},{"size":872,"mtime":1733028914779,"results":"126","hashOfConfig":"80"},{"size":479,"mtime":1733028914783,"results":"127","hashOfConfig":"80"},{"size":2332,"mtime":1733069147821,"results":"128","hashOfConfig":"80"},{"size":3473,"mtime":1733049988004,"results":"129","hashOfConfig":"80"},{"size":1368,"mtime":1733028914787,"results":"130","hashOfConfig":"80"},{"size":446,"mtime":1733028914787,"results":"131","hashOfConfig":"80"},{"size":546,"mtime":1733028914787,"results":"132","hashOfConfig":"80"},{"size":407,"mtime":1733028914787,"results":"133","hashOfConfig":"80"},{"size":170,"mtime":1733028914787,"results":"134","hashOfConfig":"80"},{"size":742,"mtime":1733028914782,"results":"135","hashOfConfig":"80"},{"size":170,"mtime":1733028914787,"results":"136","hashOfConfig":"80"},{"size":1562,"mtime":1733028914792,"results":"137","hashOfConfig":"80"},{"size":2956,"mtime":1733028914779,"results":"138","hashOfConfig":"80"},{"size":5611,"mtime":1733047984710,"results":"139","hashOfConfig":"80"},{"size":572,"mtime":1733028914779,"results":"140","hashOfConfig":"80"},{"size":4857,"mtime":1733073743463,"results":"141","hashOfConfig":"80"},{"size":8446,"mtime":1733076857175,"results":"142","hashOfConfig":"80"},{"size":1319,"mtime":1733028914783,"results":"143","hashOfConfig":"80"},{"size":3606,"mtime":1733028914783,"results":"144","hashOfConfig":"80"},{"size":2389,"mtime":1733028914783,"results":"145","hashOfConfig":"80"},{"size":2344,"mtime":1733028914783,"results":"146","hashOfConfig":"80"},{"size":769,"mtime":1733028914779,"results":"147","hashOfConfig":"80"},{"size":5001,"mtime":1733048371902,"results":"148","hashOfConfig":"80"},{"size":4808,"mtime":1733076994191,"results":"149","hashOfConfig":"80"},{"size":682,"mtime":1733028914783,"results":"150","hashOfConfig":"80"},{"size":417,"mtime":1733028914783,"results":"151","hashOfConfig":"80"},{"size":516,"mtime":1733028914783,"results":"152","hashOfConfig":"80"},{"size":967,"mtime":1733043751292,"results":"153","hashOfConfig":"80"},{"size":371,"mtime":1733028914783,"results":"154","hashOfConfig":"80"},{"size":437,"mtime":1733028914783,"results":"155","hashOfConfig":"80"},{"size":375,"mtime":1733028914783,"results":"156","hashOfConfig":"80"},{"size":625,"mtime":1733028914783,"results":"157","hashOfConfig":"80"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},"1nxrhfc",{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"160"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"160"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"160"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"160"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"160"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"160"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"160"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"160"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"160"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"160"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"160"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"160"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"160"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"160"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"160"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"160"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"160"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"160"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"160"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"300","messages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"160"},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"160"},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"160"},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"160"},{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"160"},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"160"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},"F:\\Java-Project\\ecommerce-frontend\\src\\index.js",[],["340","341"],"F:\\Java-Project\\ecommerce-frontend\\src\\redux\\store.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\App\\App.js",["342"],"import { useEffect } from \"react\";\r\nimport { createMuiTheme, ThemeProvider, CssBaseline } from \"@material-ui/core\";\r\nimport { Route, Switch, useHistory } from \"react-router-dom\";\r\nimport { setHistory } from \"../utils\";\r\nimport { NotificationContainer } from \"react-notifications\";\r\nimport { appRoutes } from \"../routes/appRoutes\";\r\nimport { Footer } from \"../components/Footer/\";\r\n\r\nexport const App = () => {\r\n  const theme = createMuiTheme({\r\n    typography: {\r\n      fontFamily: \"Josefin Sans, sans-serif\",\r\n    },\r\n    palette: {\r\n      primary: {\r\n        main: \"#3399FF\",\r\n      },\r\n      secondary: {\r\n        main: \"#EF837B\",\r\n      },\r\n    },\r\n  });\r\n\r\n  const history = useHistory();\r\n\r\n  // Initializing the history object so that we can use it in redux\r\n  useEffect(() => setHistory(history), []);\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Switch>\r\n        {appRoutes.map((route) => (\r\n          <Route {...route} />\r\n        ))}\r\n      </Switch>\r\n      <Footer />\r\n      <NotificationContainer />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\api\\instances.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\utils.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\redux\\slices\\category.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\redux\\slices\\product.js",["343"],"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { Axios, UserAxios } from \"../../api/instances\";\r\nimport * as Api from \"../../api/endpoints\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { history } from \"../../utils\";\r\n\r\nconst initialState = {\r\n  products: [],\r\n  product: null,\r\n  loading: false,\r\n  buttonLoading: false,\r\n  filter: \"All\",\r\n};\r\n\r\nconst fetchAllProducts = createAsyncThunk(\r\n    \"products/fetchAllProducts\",\r\n    async ({ pageNumber, pageSize, sortBy, sortDir }) => {\r\n        const res = await Axios.get(Api.GET_PRODUCTS, {\r\n            params: { pageNumber, pageSize, sortBy, sortDir },\r\n        });\r\n        return { products: res.data.products, total: res.data.totalElements };\r\n    }\r\n);\r\n\r\nconst fetchCategoryProducts = createAsyncThunk(\r\n    \"products/fetchCategoryProducts\",\r\n    async ({ categoryId, pageNumber, pageSize, sortBy, sortDir }) => {\r\n        const res = await Axios.get(Api.GET_CATEGORY_PRODUCTS(categoryId), {\r\n            params: { pageNumber, pageSize, sortBy, sortDir },\r\n        });\r\n        return { products: res.data.products, total: res.data.totalElements };\r\n    }\r\n);\r\n\r\nconst fetchProduct = createAsyncThunk(\"products/fetchProduct\", async (id) => {\r\n  const res = await Axios.get(Api.GET_PRODUCT(id));\r\n  return res.data.products;\r\n});\r\n\r\nconst fetchLatestProducts = createAsyncThunk(\"products/fetchLatestProducts\", async () => {\r\n    const res = await Axios.get(Api.LATEST_PRODUCTS);\r\n    return res.data.products;\r\n});\r\n\r\nconst fetchSearchProducts = createAsyncThunk(\r\n  \"products/fetchSearchProducts\",\r\n  async (searchText) => {\r\n    const res = await Axios.get(`${Api.GET_PRODUCTS}?search=${searchText}`);\r\n    return res.data.products;\r\n  }\r\n);\r\n\r\nconst addReview = createAsyncThunk(\r\n  \"products/addReview\",\r\n  async ({ id, order, rating, comment }) => {\r\n    try {\r\n      const res = await UserAxios.post(Api.CREATE_REVIEW(id), {\r\n        order,\r\n        rating,\r\n        comment,\r\n      });\r\n      history.goBack();\r\n      return res.data.product;\r\n    } catch (error) {\r\n      throw error?.response?.data || error.message;\r\n    }\r\n  }\r\n);\r\n\r\nconst productsSlice = createSlice({\r\n    name: \"products\",\r\n    initialState: {\r\n        products: [],\r\n        total: 0,\r\n        filter: {},\r\n        loading: false,\r\n    },\r\n  reducers: {\r\n    applyFilter(state, action) {\r\n      state.filter = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchAllProducts.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(fetchAllProducts.fulfilled, (state, action) => {\r\n        state.products = action.payload.products;\r\n        state.total = action.payload.total;\r\n        state.loading = false;\r\n      })\r\n      .addCase(fetchLatestProducts.pending, (state, action) => {\r\n            state.loading = true;\r\n        })\r\n      .addCase(fetchLatestProducts.fulfilled, (state, action) => {\r\n            state.products = action.payload;\r\n            state.total = action.payload.total;\r\n            state.loading = false;\r\n        })\r\n      .addCase(fetchCategoryProducts.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(fetchCategoryProducts.fulfilled, (state, action) => {\r\n        state.products = action.payload.products;\r\n        state.total = action.payload.total;\r\n        state.loading = false;\r\n      })\r\n      .addCase(fetchProduct.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(fetchProduct.fulfilled, (state, action) => {\r\n        state.product = action.payload;\r\n        state.loading = false;\r\n      })\r\n      .addCase(fetchSearchProducts.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(fetchSearchProducts.fulfilled, (state, action) => {\r\n        state.products = action.payload;\r\n        state.loading = false;\r\n      })\r\n      .addCase(addReview.pending, (state, action) => {\r\n        state.buttonLoading = true;\r\n      })\r\n      .addCase(addReview.fulfilled, (state, action) => {\r\n        state.buttonLoading = false;\r\n        NotificationManager.success(\"Review added!\");\r\n      })\r\n      .addCase(addReview.rejected, (state, action) => {\r\n        state.buttonLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      });\r\n  },\r\n});\r\n\r\nexport {\r\n  fetchAllProducts,\r\n  fetchLatestProducts,\r\n  fetchCategoryProducts,\r\n  fetchProduct,\r\n  fetchSearchProducts,\r\n  addReview,\r\n};\r\nexport const { applyFilter } = productsSlice.actions;\r\nexport default productsSlice.reducer;\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\redux\\slices\\order.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\redux\\slices\\user.js",["344"],"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { Axios, UserAxios } from \"../../api/instances\";\r\nimport * as Api from \"../../api/endpoints\";\r\nimport { history } from \"../../utils\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\nconst initialState = {\r\n  user: {},\r\n  loading: false,\r\n  authLoading: false,\r\n  cartLoading: false,\r\n};\r\n\r\nconst signup = createAsyncThunk(\r\n  \"users/signup\",\r\n  async ({ name, email, password }) => {\r\n    try {\r\n      const res = await Axios.post(Api.USER_SIGNUP, {\r\n        name,\r\n        email,\r\n        password,\r\n      });\r\n      history.push(\"/\");\r\n      return res.data;\r\n    } catch (error) {\r\n      throw error?.response?.data || error.message;\r\n    }\r\n  }\r\n);\r\n\r\nconst login = createAsyncThunk(\"users/login\", async ({ email, password }) => {\r\n  try {\r\n    const res = await Axios.post(Api.USER_LOGIN, {\r\n      email,\r\n      password,\r\n    });\r\n    history.push(\"/\");\r\n    return res.data;\r\n  } catch (error) {\r\n    throw error?.response?.data || error.message;\r\n  }\r\n});\r\n\r\nconst isLogin = createAsyncThunk(\"users/isLogin\", async () => {\r\n  const token = localStorage.getItem(\"userToken\");\r\n  if (!token) throw \"ERROR!\";\r\n\r\n  const res = await UserAxios.get(Api.IS_USER_LOGIN);\r\n  return res.data.user;\r\n});\r\n\r\nconst editUser = createAsyncThunk(\r\n  \"users/editUser\",\r\n  async ({ name, email, password }) => {\r\n    try {\r\n      const res = await UserAxios.patch(Api.UPDATE_USER, {\r\n        name,\r\n        email,\r\n        password,\r\n      });\r\n      history.push(\"/profile\");\r\n      return res.data.user;\r\n    } catch (error) {\r\n      throw error?.response?.data || error.message;\r\n    }\r\n  }\r\n);\r\n\r\nconst addToCart = createAsyncThunk(\"users/addToCart\", async (id) => {\r\n  try {\r\n    const res = await UserAxios.post(Api.ADD_TO_CART(id));\r\n    return res.data.user;\r\n  } catch (error) {\r\n    throw error?.response?.data || error.message;\r\n  }\r\n});\r\n\r\nconst decrementFromCart = createAsyncThunk(\r\n  \"users/decrementFromCart\",\r\n  async (id) => {\r\n    try {\r\n      const res = await UserAxios.delete(Api.DECREMENT_FROM_CART(id));\r\n      return res.data.user;\r\n    } catch (error) {\r\n      throw error?.response?.data || error.message;\r\n    }\r\n  }\r\n);\r\n\r\nconst deleteFromCart = createAsyncThunk(\"users/deleteFromCart\", async (id) => {\r\n  try {\r\n    const res = await UserAxios.delete(Api.DELETE_FROM_CART(id));\r\n    return res.data.user;\r\n  } catch (error) {\r\n    throw error?.response?.data || error.message;\r\n  }\r\n});\r\n\r\nconst usersSlice = createSlice({\r\n  name: \"users\",\r\n  initialState,\r\n  reducers: {\r\n    userLogout(state, action) {\r\n      localStorage.removeItem(\"userToken\");\r\n      state.user = null;\r\n      NotificationManager.success(\"Logged out!\");\r\n    },\r\n    emptyCart(state, action) {\r\n      state.user.cart = {\r\n        items: [],\r\n        price: 0,\r\n      };\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(signup.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(signup.fulfilled, (state, action) => {\r\n        state.user = action.payload.user;\r\n        localStorage.setItem(\"userToken\", `Bearer ${action.payload.token}`);\r\n        state.authLoading = false;\r\n        NotificationManager.success(\"Signed up!\");\r\n      })\r\n      .addCase(signup.rejected, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(login.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.user = action.payload.user;\r\n        localStorage.setItem(\"userToken\", `Bearer ${action.payload.token}`);\r\n        state.authLoading = false;\r\n        NotificationManager.success(\"Logged in!\");\r\n      })\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(isLogin.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(isLogin.fulfilled, (state, action) => {\r\n        state.user = action.payload;\r\n        state.loading = false;\r\n      })\r\n      .addCase(isLogin.rejected, (state, action) => {\r\n        state.loading = false;\r\n        localStorage.removeItem(\"userToken\");\r\n        state.user = null\r\n      })\r\n      .addCase(editUser.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(editUser.fulfilled, (state, action) => {\r\n        state.user = action.payload;\r\n        state.authLoading = false;\r\n        NotificationManager.success(\"Profile updated!\");\r\n      })\r\n      .addCase(editUser.rejected, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(addToCart.pending, (state, action) => {\r\n        state.cartLoading = true;\r\n      })\r\n      .addCase(addToCart.fulfilled, (state, action) => {\r\n        state.user = action.payload;\r\n        state.cartLoading = false;\r\n        NotificationManager.success(\"Added to cart\");\r\n      })\r\n      .addCase(addToCart.rejected, (state, action) => {\r\n        state.cartLoading = false;\r\n        if (action.error.message === \"Unauthenticated\") {\r\n          NotificationManager.error(\"Login to continue!\");\r\n        } else {\r\n          NotificationManager.error(action.error.message);\r\n        }\r\n      })\r\n      .addCase(decrementFromCart.pending, (state, action) => {\r\n        state.cartLoading = true;\r\n      })\r\n      .addCase(decrementFromCart.fulfilled, (state, action) => {\r\n        state.user = action.payload;\r\n        state.cartLoading = false;\r\n      })\r\n      .addCase(decrementFromCart.rejected, (state, action) => {\r\n        state.cartLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(deleteFromCart.pending, (state, action) => {\r\n        state.cartLoading = true;\r\n      })\r\n      .addCase(deleteFromCart.fulfilled, (state, action) => {\r\n        state.user = action.payload;\r\n        state.cartLoading = false;\r\n        NotificationManager.success(\"Item removed!\");\r\n      })\r\n      .addCase(deleteFromCart.rejected, (state, action) => {\r\n        state.cartLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      });\r\n  },\r\n});\r\n\r\nexport {\r\n  signup,\r\n  login,\r\n  isLogin,\r\n  editUser,\r\n  addToCart,\r\n  decrementFromCart,\r\n  deleteFromCart,\r\n};\r\n\r\nexport const { userLogout, emptyCart } = usersSlice.actions;\r\n\r\nexport default usersSlice.reducer;\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\redux\\slices\\admin.js",["345","346","347","348","349"],"import {\r\n  createSlice,\r\n  createAsyncThunk,\r\n  createEntityAdapter,\r\n} from \"@reduxjs/toolkit\";\r\nimport { AdminAxios, Axios } from \"../../api/instances\";\r\nimport * as Api from \"../../api/endpoints\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { history } from \"../../utils\";\r\n\r\nconst login = createAsyncThunk(\"admin/login\", async ({ email, password }) => {\r\n  try {\r\n    const res = await Axios.post(Api.ADMIN_LOGIN, {\r\n      email,\r\n      password,\r\n    });\r\n    history.push(\"/admin\");\r\n    NotificationManager.success(\"Logged in!\");\r\n    return res.data;\r\n  } catch (error) {\r\n    throw error?.response?.data || error.message;\r\n  }\r\n});\r\n\r\nconst isLogin = createAsyncThunk(\"admin/isLogin\", async () => {\r\n  const token = localStorage.getItem(\"adminToken\");\r\n  console.log(token);\r\n  if (!token) throw \"ERROR!\";\r\n\r\n  const res = await AdminAxios.get(Api.IS_ADMIN_LOGIN);\r\n  return res.data;\r\n});\r\n\r\nconst fetchProducts = createAsyncThunk(\"admin/fetchProducts\", async ({ pageNumber, pageSize, sortBy, sortDir }) => {\r\n  const res = await Axios.get(Api.GET_PRODUCTS, {\r\n    params: { pageNumber, pageSize, sortBy, sortDir },\r\n  });\r\n  return { products: res.data.products, total: res.data.totalElements };\r\n});\r\n\r\nconst createProduct = createAsyncThunk(\r\n    \"admin/createProduct\",\r\n    async ({ name, description, file, category, price, quantity, discount }) => {\r\n      try {\r\n        const productName = name;\r\n        const data = new FormData();\r\n        data.append(\"categoryId\", category);\r\n        console.log({ productName, description, price, quantity, discount, category });\r\n        data.append(\"product\", new Blob([JSON.stringify({ productName, description, price, quantity, discount })], { type: \"application/json\" }));\r\n        if (file) {\r\n          data.append(\"image\", file);\r\n        }\r\n        const res = await AdminAxios.post(Api.CREATE_PRODUCT, data, {\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n          },\r\n        });\r\n        history.push(\"/admin/products\");\r\n        NotificationManager.success(\"Product created!\");\r\n        return res.data;\r\n      } catch (error) {\r\n        throw error?.response?.data || error.message;\r\n      }\r\n    }\r\n);\r\n\r\nconst editProduct = createAsyncThunk(\r\n  \"admin/editProduct\",\r\n  async ({\r\n    id,\r\n    name,\r\n    description,\r\n    file,\r\n    status,\r\n    category,\r\n    price,\r\n    quantity,\r\n  }) => {\r\n    try {\r\n      if (!file) throw new Error(\"Upload image!\");\r\n      const data = new FormData();\r\n      data.append(\"file\", file);\r\n      data.append(\"upload_preset\", \"Ecommerce Images\");\r\n      const res = await Axios.post(\r\n        \"https://api.cloudinary.com/v1_1/dw3ap99ie/image/upload\",\r\n        data\r\n      );\r\n\r\n      await AdminAxios.patch(Api.UPDATE_PRODUCT(id), {\r\n        name,\r\n        description,\r\n        status,\r\n        category,\r\n        price,\r\n        quantity,\r\n        image: res.data.secure_url,\r\n      });\r\n      history.push(\"/admin/products\");\r\n      return \"Product updated!\";\r\n    } catch (error) {\r\n      throw error?.response?.data || error.message;\r\n    }\r\n  }\r\n);\r\n\r\nconst deleteProduct = createAsyncThunk(\"admin/deleteProduct\", async (id) => {\r\n  const res = await AdminAxios.delete(Api.DELETE_PRODUCT(id));\r\n  return res.data.product._id;\r\n});\r\n\r\nconst fetchCategories = createAsyncThunk(\"admin/fetchCategories\", async () => {\r\n  const res = await Axios.get(Api.GET_CATEGORIES);\r\n  return res.data.categories;\r\n});\r\n\r\nconst createCategory = createAsyncThunk(\r\n  \"admin/createCategory\",\r\n  async ({ name }) => {\r\n    try {\r\n      const res = await AdminAxios.post(Api.CREATE_CATEGORY, { name });\r\n      history.push(\"/admin/categories\");\r\n      NotificationManager.success(\"Category created!\");\r\n      return res.data.category;\r\n    } catch (error) {\r\n      throw error?.response?.data || error.message;\r\n    }\r\n  }\r\n);\r\n\r\nconst editCategory = createAsyncThunk(\r\n  \"admin/editCategory\",\r\n  async ({ id, name }) => {\r\n    try {\r\n      const res = await AdminAxios.patch(Api.UPDATE_CATEGORY(id), { name });\r\n      history.push(\"/admin/categories\");\r\n      NotificationManager.success(\"Category updated!\");\r\n      return res.data.category;\r\n    } catch (error) {\r\n      throw error?.response?.data || error.message;\r\n    }\r\n  }\r\n);\r\n\r\nconst deleteCategory = createAsyncThunk(\"admin/deleteCategory\", async (id) => {\r\n  const res = await AdminAxios.delete(Api.DELETE_CATEGORY(id));\r\n  return res.data.category._id;\r\n});\r\n\r\nconst fetchAdminOrders = createAsyncThunk(\r\n  \"admin/fetchAdminOrders\",\r\n  async () => {\r\n    const res = await AdminAxios.get(Api.ADMIN_ORDERS);\r\n    return res.data.orders;\r\n  }\r\n);\r\n\r\nconst fetchAdminOrder = createAsyncThunk(\r\n  \"admin/fetchAdminOrder\",\r\n  async (id) => {\r\n    const res = await AdminAxios.get(Api.ADMIN_ORDER(id));\r\n    return res.data.order;\r\n  }\r\n);\r\n\r\nconst editAdminOrder = createAsyncThunk(\r\n  \"admin/editAdminOrder\",\r\n  async ({ id, status }) => {\r\n    const res = await AdminAxios.patch(Api.UPDATE_ORDER(id), { status });\r\n    NotificationManager.success(\"Order's status updated!\");\r\n    return res.data.order;\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  admin: true,\r\n  authLoading: false,\r\n  loading: false,\r\n  products: [],\r\n  contentLoading: false,\r\n  categories: [],\r\n  orders: [],\r\n  total : 0,\r\n};\r\n\r\nconst adminSlice = createSlice({\r\n  name: \"admin\",\r\n  initialState: {\r\n    products: [],\r\n    total: 0,\r\n    loading: false,\r\n  },\r\n  reducers : {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(login.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.admin = true;\r\n        localStorage.setItem(\"adminToken\", `Bearer ${action.payload.token}`);\r\n        state.authLoading = false;\r\n      })\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(isLogin.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(isLogin.fulfilled, (state, action) => {\r\n        state.admin = true;\r\n        state.loading = false;\r\n      })\r\n      .addCase(isLogin.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.admin = false;\r\n        localStorage.removeItem(\"adminToken\");\r\n      })\r\n      .addCase(fetchProducts.pending, (state, action) => {\r\n        state.contentLoading = true;\r\n      })\r\n      .addCase(fetchProducts.fulfilled, (state, action) => {\r\n        state.products = action.payload.products;\r\n        state.total = action.payload.total;\r\n        state.contentLoading = false;\r\n      })\r\n      .addCase(createProduct.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(createProduct.fulfilled, (state, action) => {\r\n        state.products.push(action.payload);\r\n        state.authLoading = false;\r\n        NotificationManager.success(\"Product created!\");\r\n      })\r\n      .addCase(createProduct.rejected, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(editProduct.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(editProduct.fulfilled, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.success(\"Product updated!\");\r\n      })\r\n      .addCase(editProduct.rejected, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(deleteProduct.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(deleteProduct.fulfilled, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.success(\"Product deleted!\");\r\n        state.products = state.products.filter(\r\n          ({ _id }) => _id != action.payload\r\n        );\r\n      })\r\n      .addCase(deleteProduct.rejected, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(fetchCategories.pending, (state, action) => {\r\n        state.contentLoading = true;\r\n      })\r\n      .addCase(fetchCategories.fulfilled, (state, action) => {\r\n        state.categories = action.payload;\r\n        state.contentLoading = false;\r\n      })\r\n      .addCase(fetchCategories.rejected, (state, action) => {\r\n        state.contentLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(createCategory.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(createCategory.fulfilled, (state, action) => {\r\n        state.authLoading = false;\r\n      })\r\n      .addCase(createCategory.rejected, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(editCategory.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(editCategory.fulfilled, (state, action) => {\r\n        state.authLoading = false;\r\n      })\r\n      .addCase(editCategory.rejected, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(deleteCategory.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(deleteCategory.fulfilled, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.success(\"Category deleted!\");\r\n        state.categories = state.categories.filter(\r\n          ({ _id }) => _id != action.payload\r\n        );\r\n      })\r\n      .addCase(deleteCategory.rejected, (state, action) => {\r\n        state.authLoading = false;\r\n        NotificationManager.error(action.error.message);\r\n      })\r\n      .addCase(fetchAdminOrders.pending, (state, action) => {\r\n        state.contentLoading = true;\r\n      })\r\n      .addCase(fetchAdminOrders.fulfilled, (state, action) => {\r\n        state.orders = action.payload;\r\n        state.contentLoading = false;\r\n      })\r\n      .addCase(fetchAdminOrder.pending, (state, action) => {\r\n        state.contentLoading = true;\r\n      })\r\n      .addCase(fetchAdminOrder.fulfilled, (state, action) => {\r\n        state.order = action.payload;\r\n        state.contentLoading = false;\r\n      })\r\n      .addCase(editAdminOrder.pending, (state, action) => {\r\n        state.authLoading = true;\r\n      })\r\n      .addCase(editAdminOrder.fulfilled, (state, action) => {\r\n        state.order = action.payload;\r\n        state.authLoading = false;\r\n      });\r\n  },\r\n});\r\n\r\nexport {\r\n  login,\r\n  isLogin,\r\n  fetchProducts,\r\n  createProduct,\r\n  editProduct,\r\n  deleteProduct,\r\n  fetchCategories,\r\n  createCategory,\r\n  editCategory,\r\n  deleteCategory,\r\n  fetchAdminOrders,\r\n  fetchAdminOrder,\r\n  editAdminOrder,\r\n};\r\n\r\nexport default adminSlice.reducer;\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\routes\\appRoutes.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Footer\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\api\\endpoints.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\App\\Admin.js",["350"],"import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { isLogin } from \"../redux/slices/admin\";\r\nimport { Route, Switch, useHistory } from \"react-router-dom\";\r\nimport { adminRoutes } from \"../routes/adminRoutes\";\r\nimport { AdminHeader } from \"../components/AdminHeader/\";\r\nimport { Loader } from \"../components/Loader/\";\r\n\r\nexport const Admin = () => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state) => state.admin.loading);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [history.location.pathname]);\r\n\r\n  useEffect(() => {\r\n    dispatch(isLogin());\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <AdminHeader />\r\n\r\n          <Switch>\r\n            {adminRoutes.map((route) => (\r\n              <Route {...route} />\r\n            ))}\r\n          </Switch>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\App\\Client.js",["351"],"import { useEffect } from \"react\";\r\nimport { Header } from \"../components/Header\";\r\nimport { Route, Switch, useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { isLogin } from \"../redux/slices/user\";\r\nimport { clientRoutes } from \"../routes/clientRoutes\";\r\nimport { Loader } from \"../components/Loader/\";\r\n\r\nexport const Client = () => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state) => state.users.loading);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [history.location.pathname]);\r\n\r\n  useEffect(() => {\r\n    dispatch(isLogin());\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <Header />\r\n          <Switch>\r\n            {clientRoutes.map((route) => (\r\n              <Route {...route} />\r\n            ))}\r\n          </Switch>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\components\\Footer\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Loader\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\routes\\clientRoutes.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\pages\\Orders\\index.js",["352","353"],"import { useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Card,\r\n  Grid,\r\n  Chip,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport {} from \"@material-ui/icons\";\r\nimport { useStyles } from \"./style\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchOrders } from \"../../../redux/slices/order\";\r\nimport { fetchAdminOrders } from \"../../../redux/slices/admin\";\r\nimport moment from \"moment\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Loader } from \"../../../components/Loader/\";\r\n\r\nexport const Orders = ({ admin }) => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const orders = useSelector((state) =>\r\n    admin ? state.admin.orders : state.orders.orders\r\n  );\r\n  const contentLoading = useSelector((state) =>\r\n    admin ? state.admin.contentLoading : state.orders.contentLoading\r\n  );\r\n  const adminExist = localStorage.getItem(\"adminToken\");\r\n  const userExist = localStorage.getItem(\"userToken\");\r\n\r\n  useEffect(() => {\r\n    if (admin && !adminExist) {\r\n      history.replace(\"/admin/login\");\r\n    }\r\n    if (!admin && !userExist) {\r\n      history.replace(\"/\");\r\n    }\r\n  }, [userExist, adminExist]);\r\n\r\n  useEffect(() => {\r\n    dispatch(admin ? fetchAdminOrders() : fetchOrders());\r\n  }, []);\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      {contentLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <Typography className={classes.heading} variant=\"h3\">\r\n            Orders\r\n          </Typography>\r\n\r\n          {orders.length ? null : <Typography>No orders.</Typography>}\r\n\r\n          <Grid container spacing={4}>\r\n            {orders.map((order) => {\r\n              const items = order?.items?.reduce(\r\n                (total, item) => item.quantity + total,\r\n                0\r\n              );\r\n\r\n              return (\r\n                <Grid key={order._id} item md={4} sm={6} xs={12}>\r\n                  <Card className={classes.card}>\r\n                    <Typography>\r\n                      <span>ID</span> <Chip label={order._id} size=\"small\" />\r\n                    </Typography>\r\n                    <Typography>\r\n                      <span>Products</span> {order.items.length}\r\n                    </Typography>\r\n                    <Typography>\r\n                      <span>Items</span> {items}\r\n                    </Typography>\r\n                    <Typography>\r\n                      <span>Date</span> {moment(order.date).fromNow()}\r\n                    </Typography>\r\n                    <Typography>\r\n                      <span>Price</span> ${order.price}\r\n                    </Typography>\r\n                    <Typography>\r\n                      <span>Status</span>{\" \"}\r\n                      <Chip\r\n                        style={{ color: \"white\" }}\r\n                        label={order.status}\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                      />\r\n                    </Typography>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"primary\"\r\n                      size=\"small\"\r\n                      onClick={() =>\r\n                        admin\r\n                          ? history.push(`/admin/order/${order._id}`)\r\n                          : history.push(`/order/${order._id}`)\r\n                      }\r\n                    >\r\n                      Details\r\n                    </Button>\r\n                  </Card>\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\pages\\Order\\index.js",["354","355","356"],"import { useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Grid,\r\n  Paper,\r\n  Chip,\r\n  Card,\r\n  CardActionArea,\r\n  CardContent,\r\n  CardMedia,\r\n  Button,\r\n  CardActions,\r\n  CircularProgress,\r\n  Box,\r\n} from \"@material-ui/core\";\r\nimport {} from \"@material-ui/icons\";\r\nimport { useStyles } from \"./style\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams, Link, useHistory, Route } from \"react-router-dom\";\r\nimport { fetchOrder, deleteOrder } from \"../../../redux/slices/order\";\r\nimport { fetchAdminOrder, editAdminOrder } from \"../../../redux/slices/admin\";\r\nimport moment from \"moment\";\r\nimport { AddReview } from \"../../../components/AddReview/\";\r\nimport { Loader } from \"../../../components/Loader/\";\r\n\r\nconst showStatus = (status) => {\r\n  switch (status) {\r\n    case \"ORDERED\":\r\n      return \"PACKED\";\r\n    case \"PACKED\":\r\n      return \"SHIPPED\";\r\n    case \"SHIPPED\":\r\n      return \"DELIVERED\";\r\n    default:\r\n      return \"ORDER COMPLETED\";\r\n  }\r\n};\r\n\r\nexport const Order = ({ admin }) => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const contentLoading = useSelector((state) =>\r\n    admin ? state.admin.contentLoading : state.orders.contentLoading\r\n  );\r\n  const order = useSelector((state) =>\r\n    admin ? state.admin.order : state.orders.order\r\n  );\r\n  const { id } = useParams();\r\n  const items = order?.items?.reduce((total, item) => item.quantity + total, 0);\r\n  const buttonLoading = useSelector((state) => state.admin.authLoading);\r\n  const deleteLoading = useSelector((state) => state.orders.buttonLoading);\r\n  const adminExist = localStorage.getItem(\"adminToken\");\r\n  const userExist = localStorage.getItem(\"userToken\");\r\n\r\n  useEffect(() => {\r\n    if (admin && !adminExist) {\r\n      history.replace(\"/admin/login\");\r\n    }\r\n    if (!admin && !userExist) {\r\n      history.replace(\"/\");\r\n    }\r\n  }, [userExist, adminExist]);\r\n\r\n  useEffect(() => {\r\n    dispatch(admin ? fetchAdminOrder(id) : fetchOrder(id));\r\n  }, [id, history.location.pathname]);\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      {contentLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <Typography className={classes.heading} variant=\"h3\">\r\n            Order Details\r\n          </Typography>\r\n\r\n          <Grid container spacing={4}>\r\n            <Grid item md={6} xs={12}>\r\n              <Paper className={classes.paper}>\r\n                <Typography>\r\n                  <span>Order ID</span> <Chip label={order?._id} size=\"small\" />\r\n                </Typography>\r\n                <Typography>\r\n                  <span>Products</span> {order?.items.length}\r\n                </Typography>\r\n                <Typography>\r\n                  <span>Items</span> {items}\r\n                </Typography>\r\n                <Typography>\r\n                  <span>Date</span> {moment(order?.date).fromNow()}\r\n                </Typography>\r\n                <Typography>\r\n                  <span>Price</span> ${order?.price}\r\n                </Typography>\r\n                <Typography>\r\n                  <span>Status</span>{\" \"}\r\n                  <Chip\r\n                    label={order?.status}\r\n                    size=\"small\"\r\n                    style={{ color: \"white\", fontWeight: \"bold\" }}\r\n                    color=\"primary\"\r\n                  />\r\n                </Typography>\r\n                {admin ? (\r\n                  <>\r\n                    {order?.status === \"DELIVERED\" ? null : (\r\n                      <Typography>\r\n                        <span>Change Status:</span>\r\n                      </Typography>\r\n                    )}\r\n                    <Button\r\n                      disabled={order?.status === \"DELIVERED\" || buttonLoading}\r\n                      variant=\"outlined\"\r\n                      color=\"primary\"\r\n                      onClick={() =>\r\n                        dispatch(\r\n                          editAdminOrder({\r\n                            id,\r\n                            status: showStatus(order?.status),\r\n                          })\r\n                        )\r\n                      }\r\n                      endIcon={\r\n                        buttonLoading ? <CircularProgress size={20} /> : null\r\n                      }\r\n                    >\r\n                      {showStatus(order?.status)}\r\n                    </Button>\r\n                  </>\r\n                ) : null}\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item md={6} xs={12}>\r\n              <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">Shipping Address</Typography>\r\n                <Typography>{order?.shippingAddress?.country}</Typography>\r\n                <Typography>{order?.shippingAddress?.city}</Typography>\r\n                <Typography>{order?.shippingAddress?.address1}</Typography>\r\n                <Typography>{order?.shippingAddress?.address2}</Typography>\r\n                <Typography>{order?.shippingAddress?.zipCode}</Typography>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Typography variant=\"h4\" className={classes.heading}>\r\n            Products\r\n          </Typography>\r\n\r\n          <Grid container spacing={5}>\r\n            {order?.items?.map((item) => {\r\n              let isAddReview = false;\r\n              const reviewExist = item.product.reviews?.find(\r\n                (review) => review.order == order._id\r\n              );\r\n\r\n              if (order.status === \"DELIVERED\" && !reviewExist && !admin) {\r\n                isAddReview = true;\r\n              }\r\n\r\n              return (\r\n                <Grid key={item._id} item xs={12} sm={6} lg={4}>\r\n                  <Card className={classes.product}>\r\n                    <CardActionArea\r\n                      onClick={() =>\r\n                        history.push(`/product/${item.product._id}`)\r\n                      }\r\n                    >\r\n                      <CardMedia\r\n                        style={{ height: \"250px\", backgroundSize: \"contain\" }}\r\n                        className={classes.media}\r\n                        image={item.product.image}\r\n                        title={item.product.name}\r\n                      />\r\n                    </CardActionArea>\r\n\r\n                    <CardContent>\r\n                      <Typography\r\n                        className={classes.productName}\r\n                        variant=\"h5\"\r\n                        component={Link}\r\n                        to={`/product/${item.product._id}`}\r\n                      >\r\n                        {item.product.name}\r\n                      </Typography>\r\n                      <Typography>\r\n                        <span>Quantity</span> {item.quantity}\r\n                      </Typography>\r\n                      <Typography>\r\n                        <span>Price</span> ${item.product.price}\r\n                      </Typography>\r\n                      <Typography>\r\n                        <span>Total Price</span> $\r\n                        {item.quantity * item.product.price}\r\n                      </Typography>\r\n\r\n                      {!admin && reviewExist ? (\r\n                        <Button variant=\"contained\" disabled>\r\n                          Already reviewed!\r\n                        </Button>\r\n                      ) : null}\r\n                    </CardContent>\r\n\r\n                    {isAddReview && (\r\n                      <CardActions>\r\n                        <Button\r\n                          style={{ color: \"white\" }}\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={() =>\r\n                            history.push(\r\n                              `/order/${id}/review/${item.product._id}`\r\n                            )\r\n                          }\r\n                        >\r\n                          Add Review\r\n                        </Button>\r\n                      </CardActions>\r\n                    )}\r\n                  </Card>\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n\r\n          {!admin && order?.status === \"DELIVERED\" ? (\r\n            <Box marginTop={4}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                size=\"large\"\r\n                disabled={deleteLoading}\r\n                onClick={() => dispatch(deleteOrder(id))}\r\n                endIcon={deleteLoading ? <CircularProgress size={20} /> : null}\r\n              >\r\n                Delete order\r\n              </Button>\r\n            </Box>\r\n          ) : null}\r\n        </>\r\n      )}\r\n\r\n      <Route\r\n        path={`/order/${id}/review/:productId`}\r\n        render={() => <AddReview order={id} />}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Checkout\\index.js",["357","358","359"],"import { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport {} from \"@material-ui/icons\";\r\nimport { useStyles } from \"./style\";\r\nimport { Payment } from \"./Payment\";\r\nimport { Shipping } from \"./Shipping\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { createPaymentIntent } from \"../../../redux/slices/order\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { UserAxios } from \"../../../api/instances\";\r\nimport * as Api from \"../../../api/endpoints\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { emptyCart } from \"../../../redux/slices/user\";\r\nimport { withUserAuth } from \"../../../hoc/withUserAuth\";\r\nimport { Loader } from \"../../../components/Loader/\";\r\n\r\nconst stripePromise = loadStripe(\r\n  \"pk_test_51HY7L7IuPlgS5Yt8yUJxodsQVLzRImwyhBycWSTi4njwihcuahtqN2dUAAwaYDG2ZlErSFZ2eFHwM18uYlIRVKvF00BK4ecBy6\"\r\n);\r\n\r\nconst getSteps = () => [\"Shipping Address\", \"Payment Info\"];\r\n\r\nconst Checkout = withUserAuth(true)((props) => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const contentLoading = useSelector((state) => state.orders.contentLoading);\r\n  const clientSecret = useSelector((state) => state.orders.clientSecret);\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [skipped, setSkipped] = useState(new Set());\r\n  const steps = getSteps();\r\n  const [country, setCountry] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n  const [address1, setAddress1] = useState(\"\");\r\n  const [address2, setAddress2] = useState(\"\");\r\n  const [zipCode, setZipCode] = useState(\"\");\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const [processing, setProcessing] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    dispatch(createPaymentIntent());\r\n  }, []);\r\n\r\n  const changeCountryHandler = (e) => setCountry(e.target.value);\r\n  const changeCityHandler = (e) => setCity(e.target.value);\r\n  const changeAddress1Handler = (e) => setAddress1(e.target.value);\r\n  const changeAddress2Handler = (e) => setAddress2(e.target.value);\r\n  const changeZipCodeHandler = (e) => {\r\n    if (isNaN(Number(e.target.value))) return;\r\n    setZipCode(e.target.value.trim());\r\n  };\r\n\r\n  const isStepSkipped = (step) => skipped.has(step);\r\n\r\n  const nextStepHandler = () => {\r\n    const newSkipped = [...skipped.values(), activeStep];\r\n    setSkipped(new Set([...newSkipped]));\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  };\r\n\r\n  const paymentHandler = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      setProcessing(true);\r\n\r\n      const payload = await stripe.confirmCardPayment(clientSecret, {\r\n        payment_method: {\r\n          card: elements.getElement(CardElement),\r\n        },\r\n      });\r\n\r\n      if (payload.error) {\r\n        setProcessing(false);\r\n        return NotificationManager.error(payload.error.message);\r\n      }\r\n      const res = await UserAxios.post(Api.CREATE_ORDER, {\r\n        country,\r\n        city,\r\n        address1,\r\n        address2,\r\n        zipCode,\r\n      });\r\n\r\n      dispatch(emptyCart());\r\n\r\n      NotificationManager.success(\"Order placed!\");\r\n\r\n      history.replace(\"/\");\r\n      setProcessing(false);\r\n    } catch (error) {\r\n      NotificationManager.error(error.message);\r\n    }\r\n    setProcessing(false);\r\n  };\r\n\r\n  const getStepContent = (step) => {\r\n    switch (step) {\r\n      case 0:\r\n        return (\r\n          <Shipping\r\n            country={country}\r\n            city={city}\r\n            address1={address1}\r\n            address2={address2}\r\n            zipCode={zipCode}\r\n            changeCountryHandler={changeCountryHandler}\r\n            changeCityHandler={changeCityHandler}\r\n            changeAddress1Handler={changeAddress1Handler}\r\n            changeAddress2Handler={changeAddress2Handler}\r\n            changeZipCodeHandler={changeZipCodeHandler}\r\n            nextStepHandler={nextStepHandler}\r\n          />\r\n        );\r\n      case 1:\r\n        return (\r\n          <Payment paymentHandler={paymentHandler} processing={processing} />\r\n        );\r\n      default:\r\n        return <p>No Content</p>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      {contentLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <Stepper activeStep={activeStep} className={classes.stepper}>\r\n            {steps.map((label, index) => {\r\n              let stepProps = {};\r\n              if (isStepSkipped(index)) {\r\n                stepProps.completed = true;\r\n              }\r\n\r\n              return (\r\n                <Step key={label} {...stepProps}>\r\n                  <StepLabel>{label}</StepLabel>\r\n                </Step>\r\n              );\r\n            })}\r\n          </Stepper>\r\n\r\n          {getStepContent(activeStep)}\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n});\r\n\r\nconst Component = () => (\r\n  <Elements stripe={stripePromise}>\r\n    <Checkout />\r\n  </Elements>\r\n);\r\n\r\nexport { Component as Checkout };\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\ProductPage\\index.js",["360","361","362"],"import { useEffect } from \"react\";\r\nimport { useStyles, BigTooltip } from \"./style\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Typography,\r\n  Button,\r\n  Badge,\r\n  Table,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Paper,\r\n  Avatar,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { Rating } from \"@material-ui/lab\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchProduct } from \"../../../redux/slices/product\";\r\nimport moment from \"moment\";\r\nimport { addToCart } from \"../../../redux/slices/user\";\r\nimport { Review } from \"../../../components/Review/\";\r\nimport { Loader } from \"../../../components/Loader/\";\r\n\r\nexport const ProductPage = () => {\r\n  const dispatch = useDispatch();\r\n  const product = useSelector((state) => state.products.product);\r\n  const cartLoading = useSelector((state) => state.users.cartLoading);\r\n  const loading = useSelector((state) => state.products.loading);\r\n  const { id } = useParams();\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchProduct(id));\r\n  }, []);\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" className={classes.root}>\r\n      {loading || !product ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <Grid container spacing={3}>\r\n            <Grid item md={6} xs={12}>\r\n              <div className={classes.img}>\r\n                <img src={product.image} />\r\n              </div>\r\n            </Grid>\r\n\r\n            <Grid item md={6} xs={12}>\r\n              <Typography variant=\"h3\" className={classes.heading}>\r\n                {product.name}\r\n              </Typography>\r\n\r\n              <BigTooltip\r\n                title={`${product.rating?.toFixed(1) || \"No\"} Rating`}\r\n                placement=\"top-start\"\r\n                arrow\r\n              >\r\n                <div className={classes.rating}>\r\n                  <Rating precision=\"0.1\" value={product.rating} readOnly />\r\n                  <Typography>({product.reviews.length} Reviews)</Typography>\r\n                </div>\r\n              </BigTooltip>\r\n\r\n              <Typography\r\n                variant=\"h5\"\r\n                color=\"primary\"\r\n                className={classes.price}\r\n              >\r\n                ${product.price}\r\n              </Typography>\r\n              <Typography>{product.description}</Typography>\r\n              <Badge\r\n                badgeContent=\"Out of stock\"\r\n                color=\"primary\"\r\n                className={classes.badge}\r\n                invisible={product.quantity}\r\n              >\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  disabled={!product.quantity || cartLoading}\r\n                  onClick={() => dispatch(addToCart(product._id))}\r\n                  endIcon={\r\n                    cartLoading ? (\r\n                      <CircularProgress size={20} color=\"primary\" />\r\n                    ) : null\r\n                  }\r\n                >\r\n                  Add to cart\r\n                </Button>\r\n              </Badge>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <TableContainer component={Paper} className={classes.tableContainer}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Product Details</TableCell>\r\n                  <TableCell></TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n\r\n              <TableBody>\r\n                <TableRow>\r\n                  <TableCell component=\"th\">Category</TableCell>\r\n                  <TableCell>{product.category.name}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell component=\"th\">Created</TableCell>\r\n                  <TableCell>{moment(product.created).fromNow()}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell component=\"th\">Quantity in stock</TableCell>\r\n                  <TableCell>{product.quantity}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell component=\"th\">Sold</TableCell>\r\n                  <TableCell>{product.sold}</TableCell>\r\n                </TableRow>\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n\r\n          <Typography variant=\"h5\">\r\n            Reviews ({product.reviews.length})\r\n          </Typography>\r\n          {product.reviews.map((review) => (\r\n            <Review key={review._id} review={review} />\r\n          ))}\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\CategoryProducts\\index.js",["363"],"import { useEffect, useState } from \"react\";\r\nimport { Products } from \"../../../components/Products/\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchCategoryProducts } from \"../../../redux/slices/product\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Container, Typography, Box, TablePagination, Select, MenuItem, FormControl, InputLabel } from \"@material-ui/core\";\r\nimport { useStyles } from \"./style\";\r\nimport { Loader } from \"../../../components/Loader/\";\r\n\r\nexport const CategoryProducts = () => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const { id } = useParams();\r\n  const products = useSelector((state) => state.products.products);\r\n  const total = useSelector((state) => state.products.total);\r\n  const loading = useSelector((state) => state.products.loading);\r\n\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(12);\r\n  const [sortBy, setSortBy] = useState(\"productName\");\r\n  const [sortDir, setSortDir] = useState(\"asc\");\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCategoryProducts({ categoryId: id, pageNumber: page, pageSize: rowsPerPage, sortBy, sortDir }));\r\n  }, [id, page, rowsPerPage, sortBy, sortDir]);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleSortByChange = (event) => {\r\n    setSortBy(event.target.value);\r\n  };\r\n\r\n  const handleSortDirChange = (event) => {\r\n    setSortDir(event.target.value);\r\n  };\r\n\r\n  console.log(products);\r\n  console.log(total);\r\n\r\n  return (\r\n      <Container maxWidth=\"lg\">\r\n        {loading ? (\r\n            <Loader />\r\n        ) : (\r\n            <>\r\n              <Typography variant=\"h3\" className={classes.heading}>\r\n                Products related to '{products[0]?.category?.categoryName}'\r\n              </Typography>\r\n              <Box marginBottom={5} className={classes.filterRow}>\r\n                <Box marginTop={5} className={classes.sortControls}>\r\n                  <FormControl className={classes.formControl} style={{ marginRight: '20px' }}>\r\n                    <InputLabel>Sort By</InputLabel>\r\n                    <Select value={sortBy} onChange={handleSortByChange}>\r\n                      <MenuItem value=\"productName\">Product Name</MenuItem>\r\n                      <MenuItem value=\"price\">Price</MenuItem>\r\n                      <MenuItem value=\"createdAt\">Date</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                  <FormControl className={classes.formControl}>\r\n                    <InputLabel>Direction</InputLabel>\r\n                    <Select value={sortDir} onChange={handleSortDirChange}>\r\n                      <MenuItem value=\"asc\">Ascending</MenuItem>\r\n                      <MenuItem value=\"desc\">Descending</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </Box>\r\n              </Box>\r\n              <Products products={products} />\r\n              <TablePagination\r\n                  rowsPerPageOptions={[12, 24, 48]}\r\n                  component=\"div\"\r\n                  count={total}\r\n                  rowsPerPage={rowsPerPage}\r\n                  page={page}\r\n                  onPageChange={handleChangePage}\r\n                  onRowsPerPageChange={handleChangeRowsPerPage}\r\n              />\r\n            </>\r\n        )}\r\n      </Container>\r\n  );\r\n};","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Home\\index.js",["364","365","366","367","368"],"import { useEffect } from \"react\";\r\nimport { Container, Typography, Hidden, Box } from \"@material-ui/core\";\r\nimport { Hero } from \"../../../components/Hero/\";\r\nimport { Products } from \"../../../components/Products/\";\r\nimport { useStyles } from \"./style\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchLatestProducts } from \"../../../redux/slices/product\";\r\nimport { Search } from \"../../../components/Search/\";\r\nimport { Filter } from \"../../../components/Filter/\";\r\nimport { filterProducts } from \"../../../utils\";\r\nimport { Loader } from \"../../../components/Loader/\";\r\n\r\nexport const Home = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const products = useSelector((state) => state.products.products);\r\n  const filter = useSelector((state) => state.products.filter);\r\n  const loading = useSelector((state) => state.products.loading);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchLatestProducts());\r\n    console.log(products)\r\n  }, []);\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Hero />\r\n\r\n      <Typography\r\n        variant=\"h3\"\r\n        style={{ fontWeight: \"bold\", marginBottom: \"30px\" }}\r\n        id=\"products\"\r\n      >\r\n        Our Products\r\n      </Typography>\r\n\r\n      <Hidden mdUp>\r\n        <Search className={classes.input} />\r\n      </Hidden>\r\n\r\n      {/*<Box marginBottom={5}>*/}\r\n      {/*  <Filter />*/}\r\n      {/*</Box>*/}\r\n\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <Products products={products} />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\pages\\Order\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\pages\\Orders\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Checkout\\Payment.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Checkout\\Shipping.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\AddReview\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\hoc\\withUserAuth.js",["369"],"import { useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const withUserAuth = (auth) => (WrappedComponent) => {\r\n  return (props) => {\r\n    const { replace } = useHistory();\r\n    const user = useSelector((state) => state.users.user);\r\n\r\n    useEffect(() => {\r\n      if (auth && !user) replace(\"/\");\r\n      if (!auth && user) replace(\"/\");\r\n    }, [user]);\r\n\r\n    return <WrappedComponent {...props} />;\r\n  };\r\n};\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Checkout\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Home\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Filter\\index.js",["370"],"import { useState, useEffect } from \"react\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport {} from \"@material-ui/icons\";\r\nimport { useStyles } from \"./style\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { applyFilter } from \"../../redux/slices/product\";\r\n\r\nexport const Filter = (props) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const categories = useSelector((state) => state.categories.categories);\r\n  const [filter, setFilter] = useState(\"All\");\r\n\r\n  useEffect(() => {\r\n    dispatch(applyFilter(\"All\"));\r\n  }, []);\r\n\r\n  const changeFilterHandler = (e) => {\r\n    setFilter(e.target.value);\r\n    dispatch(applyFilter(e.target.value));\r\n  };\r\n\r\n  return (\r\n    <TextField\r\n      select\r\n      label=\"Filter\"\r\n      value={filter}\r\n      onChange={changeFilterHandler}\r\n      className={classes.textField}\r\n    >\r\n      <MenuItem value=\"All\">All</MenuItem>\r\n      {categories.map((category) => (\r\n        <MenuItem value={category.categoryName} key={category.categoryName}>\r\n          {category.categoryName}\r\n        </MenuItem>\r\n      ))}\r\n    </TextField>\r\n  );\r\n};\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\CategoryProducts\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Search\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\ProductPage\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Products\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Hero\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Review\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\AddReview\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Cart\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\EditProfile\\index.js",["371"],"import { useState } from \"react\";\r\nimport {\r\n  Container,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Paper,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport {} from \"@material-ui/icons\";\r\nimport { useStyles } from \"../Login/style\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { editUser } from \"../../../redux/slices/user\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { withUserAuth } from \"../../../hoc/withUserAuth\";\r\n\r\nexport const EditProfile = withUserAuth(true)((props) => {\r\n  const classes = useStyles();\r\n  const user = useSelector((state) => state.users.user);\r\n  const [name, setName] = useState(user?.name);\r\n  const [email, setEmail] = useState(user?.email);\r\n  const [password, setPassword] = useState(user?.password);\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state) => state.users.authLoading);\r\n\r\n  const changeNameHandler = (e) => setName(e.target.value);\r\n  const changeEmailHandler = (e) => setEmail(e.target.value);\r\n  const changePasswordHandler = (e) => setPassword(e.target.value);\r\n\r\n  const editHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(editUser({ name, email, password }));\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" className={classes.root}>\r\n      <Typography variant=\"h3\" className={classes.heading}>\r\n        Edit Profile\r\n      </Typography>\r\n\r\n      <Paper component=\"form\" className={classes.form} onSubmit={editHandler}>\r\n        <TextField\r\n          label=\"Name\"\r\n          className={classes.textField}\r\n          value={name}\r\n          onChange={changeNameHandler}\r\n        />\r\n        <TextField\r\n          label=\"Email\"\r\n          type=\"email\"\r\n          className={classes.textField}\r\n          value={email}\r\n          onChange={changeEmailHandler}\r\n        />\r\n        <TextField\r\n          label=\"Password\"\r\n          type=\"password\"\r\n          className={classes.textField}\r\n          value={password}\r\n          onChange={changePasswordHandler}\r\n        />\r\n        <Button\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          style={{ color: \"white\" }}\r\n          disabled={loading}\r\n          endIcon={\r\n            loading ? <CircularProgress size={20} color=\"primary\" /> : null\r\n          }\r\n        >\r\n          Edit\r\n        </Button>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n});\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Profile\\index.js",["372"],"import {\r\n  Container,\r\n  Typography,\r\n  Table,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Paper,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport {} from \"@material-ui/icons\";\r\nimport { useStyles } from \"./style\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { withUserAuth } from \"../../../hoc/withUserAuth\";\r\n\r\nexport const Profile = withUserAuth(true)((props) => {\r\n  const classes = useStyles();\r\n  const { push } = useHistory();\r\n  const user = useSelector((state) => state.users.user);\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Typography variant=\"h3\" className={classes.heading}>\r\n        Your Profile\r\n      </Typography>\r\n\r\n      <TableContainer component={Paper} className={classes.tableContainer}>\r\n        <Table>\r\n          <TableBody>\r\n            <TableRow>\r\n              <TableCell component=\"th\">Name</TableCell>\r\n              <TableCell>{user?.name}</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell component=\"th\">Email</TableCell>\r\n              <TableCell>{user?.email}</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>\r\n                <Button\r\n                  onClick={() => push(\"/edit-profile\")}\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                >\r\n                  Edit\r\n                </Button>\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Container>\r\n  );\r\n});\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Login\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Signup\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Filter\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Hero\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Review\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Product\\index.js",["373"],"import { useStyles } from \"./style\";\r\nimport {\r\n  Card,\r\n  CardActionArea,\r\n  CardActions,\r\n  CardMedia,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { Rating } from \"@material-ui/lab\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addToCart } from \"../../redux/slices/user\";\r\n\r\nexport const Product = (props) => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const { push } = useHistory();\r\n  const loading = useSelector((state) => state.users.cartLoading);\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardActionArea onClick={() => push(`/product/${props.productId}`)}>\r\n        <CardMedia\r\n          style={{ height: \"250px\", backgroundSize: \"contain\" }}\r\n          className={classes.media}\r\n          image={props.image}\r\n          title={props.productName}\r\n        />\r\n      </CardActionArea>\r\n\r\n      <CardContent>\r\n        <Typography\r\n          className={classes.category}\r\n          component={Link}\r\n          to={`/category/${props.category.categoryId}`}\r\n        >\r\n          {props.category.categoryName}\r\n        </Typography>\r\n        <Typography\r\n          className={classes.name}\r\n          variant=\"h5\"\r\n          component={Link}\r\n          to={`/product/${props._id}`}\r\n        >\r\n          {props.productName}\r\n        </Typography>\r\n        <Typography className={classes.price}>${props.price}</Typography>\r\n        {/*<div className={classes.reviews}>*/}\r\n        {/*  <Rating value={props.rating} readOnly />*/}\r\n        {/*  <Typography>({props.reviews.length} Reviews)</Typography>*/}\r\n        {/*</div>*/}\r\n      </CardContent>\r\n\r\n      <CardActions className={classes.actions}>\r\n        <Button\r\n          size=\"small\"\r\n          color=\"primary\"\r\n          onClick={() => push(`/product/${props.productId}`)}\r\n        >\r\n          View\r\n        </Button>\r\n        <Button\r\n          size=\"small\"\r\n          color=\"secondary\"\r\n          onClick={() => dispatch(addToCart(props.productId))}\r\n          disabled={loading}\r\n          endIcon={\r\n            loading ? <CircularProgress size={20} color=\"secondary\" /> : null\r\n          }\r\n        >\r\n          Add to cart\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Shop\\index.js",["374","375"],"import { useEffect, useState } from \"react\";\r\nimport { Products } from \"../../../components/Products/\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchAllProducts } from \"../../../redux/slices/product\";\r\nimport { Container, Typography, Box, TablePagination, Select, MenuItem, FormControl, InputLabel } from \"@material-ui/core\";\r\nimport { useStyles } from \"./style\";\r\nimport { Loader } from \"../../../components/Loader/\";\r\n\r\nexport const Shop = () => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const products = useSelector((state) => state.products.products);\r\n  const total = useSelector((state) => state.products.total);\r\n  const filter = useSelector((state) => state.products.filter);\r\n  const loading = useSelector((state) => state.products.loading);\r\n\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(12);\r\n  const [sortBy, setSortBy] = useState(\"productName\");\r\n  const [sortDir, setSortDir] = useState(\"asc\");\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchAllProducts({ pageNumber: page, pageSize: rowsPerPage, sortBy, sortDir }));\r\n  }, [page, rowsPerPage, sortBy, sortDir]);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleSortByChange = (event) => {\r\n    setSortBy(event.target.value);\r\n  };\r\n\r\n  const handleSortDirChange = (event) => {\r\n    setSortDir(event.target.value);\r\n  };\r\n\r\n  // const filteredProducts = filterProducts(products, filter);\r\n\r\n  return (\r\n      <Container maxWidth=\"lg\">\r\n        {loading ? (\r\n            <Loader />\r\n        ) : (\r\n            <>\r\n              <Typography variant=\"h3\" className={classes.heading}>\r\n                Our Products\r\n              </Typography>\r\n              <Box marginBottom={5} className={classes.filterRow}>\r\n                {/*<Filter />*/}\r\n                {/*<Box marginTop={5} className={classes.sortControls}>*/}\r\n                  <FormControl className={classes.formControl} style={{ marginRight: '20px' }}>\r\n                    <InputLabel>Sort By</InputLabel>\r\n                    <Select value={sortBy} onChange={handleSortByChange}>\r\n                      <MenuItem value=\"productName\">Product Name</MenuItem>\r\n                      <MenuItem value=\"price\">Price</MenuItem>\r\n                      <MenuItem value=\"createdAt\">Date</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                  <FormControl className={classes.formControl}>\r\n                    <InputLabel>Direction</InputLabel>\r\n                    <Select value={sortDir} onChange={handleSortDirChange}>\r\n                      <MenuItem value=\"asc\">Ascending</MenuItem>\r\n                      <MenuItem value=\"desc\">Descending</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                {/*</Box>*/}\r\n              </Box>\r\n              <Products products={products} />\r\n              <TablePagination\r\n                  rowsPerPageOptions={[12, 24, 48]}\r\n                  component=\"div\"\r\n                  count={total}\r\n                  rowsPerPage={rowsPerPage}\r\n                  page={page}\r\n                  onPageChange={handleChangePage}\r\n                  onRowsPerPageChange={handleChangeRowsPerPage}\r\n              />\r\n            </>\r\n        )}\r\n      </Container>\r\n  );\r\n};","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\SearchPage\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Cart\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Login\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Profile\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\Shop\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Product\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\clientPages\\SearchPage\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\routes\\adminRoutes.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\AdminHeader\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Header\\index.js",["376"],"import { useState, useEffect } from \"react\"\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Menu,\r\n  MenuItem,\r\n  IconButton,\r\n  Hidden,\r\n  Badge\r\n} from \"@material-ui/core\"\r\nimport { useStyles } from \"./style\"\r\nimport {\r\n  ExpandMoreOutlined,\r\n  HomeOutlined,\r\n  CategoryOutlined,\r\n  Storefront,\r\n  PermIdentityOutlined,\r\n  ExitToAppOutlined,\r\n  VpnKeyOutlined,\r\n  ShoppingCartOutlined,\r\n  LocalMallOutlined,\r\n  SecurityOutlined\r\n} from \"@material-ui/icons\"\r\nimport { Sidebar } from \"../Sidebar/\"\r\nimport { MenuRounded } from \"@material-ui/icons\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { fetchCategories } from \"../../redux/slices/category\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport { Search } from \"../Search/\"\r\nimport { userLogout } from \"../../redux/slices/user\"\r\n\r\nexport const Header = () => {\r\n  const dispatch = useDispatch()\r\n  const categories = useSelector((state) => state.categories.categories)\r\n  const user = useSelector((state) => state.users.user)\r\n  const classes = useStyles()\r\n  const [anchorEl, setAnchorEl] = useState(null)\r\n  const [openSidebar, setOpenSidebar] = useState(false)\r\n  const cartItems = user?.cart?.items?.reduce((total, value) => {\r\n    return value.quantity + total\r\n  }, 0)\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCategories())\r\n  }, [])\r\n\r\n  const closeDropdownHandler = () => setAnchorEl(null)\r\n  const openDropdownHandler = (e) => setAnchorEl(e.currentTarget)\r\n\r\n  const handleOpenSidebar = () => setOpenSidebar(true)\r\n  const handleCloseSidebar = () => setOpenSidebar(false)\r\n\r\n  const dropdown = (\r\n    <Menu\r\n      anchorEl={anchorEl}\r\n      open={!!anchorEl}\r\n      keepMounted\r\n      onClose={closeDropdownHandler}\r\n    >\r\n      {categories.map(({ categoryId, categoryName }) => (\r\n        <MenuItem\r\n          component={NavLink}\r\n          to={`/category/${categoryId}`}\r\n          onClick={closeDropdownHandler}\r\n          key={categoryId}\r\n        >\r\n          {categoryName}\r\n        </MenuItem>\r\n      ))}\r\n    </Menu>\r\n  )\r\n\r\n  return (\r\n    <AppBar\r\n      position=\"sticky\"\r\n      className={classes.root}\r\n      style={{ backgroundColor: \"white\" }}\r\n    >\r\n      <Toolbar>\r\n        <Typography\r\n          className={classes.heading}\r\n          variant=\"h4\"\r\n          component={NavLink}\r\n          to=\"/\"\r\n          exact\r\n        >\r\n          ReactShop\r\n        </Typography>\r\n\r\n        <Hidden smDown>\r\n          <Search className={classes.input} />\r\n        </Hidden>\r\n\r\n        <Hidden mdDown>\r\n          <Typography\r\n            component={NavLink}\r\n            activeClassName={classes.activeLink}\r\n            exact\r\n            to=\"/\"\r\n            className={classes.navItems}\r\n          >\r\n            <HomeOutlined /> Home\r\n          </Typography>\r\n\r\n          <Typography\r\n            component={NavLink}\r\n            activeClassName={classes.activeLink}\r\n            exact\r\n            to=\"/shop\"\r\n            className={classes.navItems}\r\n          >\r\n            <Storefront /> Shop\r\n          </Typography>\r\n\r\n          <Typography\r\n            className={classes.navItems}\r\n            onClick={openDropdownHandler}\r\n          >\r\n            <CategoryOutlined /> Category <ExpandMoreOutlined />\r\n          </Typography>\r\n\r\n          {user ? (\r\n            <>\r\n              <Typography\r\n                component={NavLink}\r\n                activeClassName={classes.activeLink}\r\n                exact\r\n                to=\"/profile\"\r\n                className={classes.navItems}\r\n              >\r\n                <PermIdentityOutlined /> Profile\r\n              </Typography>\r\n              <Typography\r\n                component={NavLink}\r\n                activeClassName={classes.activeLink}\r\n                exact\r\n                to=\"/cart\"\r\n                className={classes.navItems}\r\n              >\r\n                <ShoppingCartOutlined />{\" \"}\r\n                <Badge badgeContent={cartItems} color=\"primary\">\r\n                  Cart\r\n                </Badge>\r\n              </Typography>\r\n              <Typography\r\n                component={NavLink}\r\n                activeClassName={classes.activeLink}\r\n                exact\r\n                to=\"/orders\"\r\n                className={classes.navItems}\r\n              >\r\n                <LocalMallOutlined /> Orders\r\n              </Typography>\r\n              <Typography\r\n                className={classes.navItems}\r\n                onClick={() => dispatch(userLogout())}\r\n              >\r\n                <ExitToAppOutlined /> Logout\r\n              </Typography>\r\n            </>\r\n          ) : (\r\n            <Typography\r\n              component={NavLink}\r\n              activeClassName={classes.activeLink}\r\n              exact\r\n              to=\"/login\"\r\n              className={classes.navItems}\r\n            >\r\n              <VpnKeyOutlined /> Login\r\n            </Typography>\r\n          )}\r\n          <Typography\r\n            component={NavLink}\r\n            activeClassName={classes.activeLink}\r\n            exact\r\n            to=\"/admin\"\r\n            className={classes.navItems}\r\n          >\r\n            <SecurityOutlined /> Admin\r\n          </Typography>\r\n        </Hidden>\r\n\r\n        <Hidden lgUp>\r\n          <IconButton\r\n            onClick={handleOpenSidebar}\r\n            style={{ marginLeft: \"auto\" }}\r\n          >\r\n            <MenuRounded className={classes.menuIcon} />\r\n          </IconButton>\r\n        </Hidden>\r\n\r\n        {dropdown}\r\n\r\n        <Sidebar\r\n          cartItems={cartItems}\r\n          open={openSidebar}\r\n          onClose={handleCloseSidebar}\r\n        />\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\components\\AdminHeader\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Products\\index.js",["377"],"import { useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Container,\r\n  Typography,\r\n  Table,\r\n  TableContainer,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Paper,\r\n  TablePagination,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem, Box,\r\n} from \"@material-ui/core\";\r\nimport { Add } from \"@material-ui/icons\";\r\nimport { useStyles } from \"./style\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchProducts } from \"../../../redux/slices/admin\";\r\nimport { Row } from \"./Row\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { withAdminAuth } from \"../../../hoc/withAdminAuth\";\r\nimport { Loader } from \"../../../components/Loader/\";\r\n\r\nexport const Products = withAdminAuth(true)((props) => {\r\n  const { push } = useHistory();\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const products = useSelector((state) => state.admin.products);\r\n  const total = useSelector((state) => state.admin.total);\r\n  const loading = useSelector((state) => state.admin.loading);\r\n\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const [sortBy, setSortBy] = useState(\"productName\");\r\n  const [sortDir, setSortDir] = useState(\"asc\");\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchProducts({ pageNumber: page, pageSize: rowsPerPage, sortBy, sortDir }));\r\n  }, [page, rowsPerPage, sortBy, sortDir]);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleSortByChange = (event) => {\r\n    setSortBy(event.target.value);\r\n  };\r\n\r\n  const handleSortDirChange = (event) => {\r\n    setSortDir(event.target.value);\r\n  };\r\n\r\n  return (\r\n      <Container maxWidth=\"lg\">\r\n        {loading ? (\r\n            <Loader />\r\n        ) : (\r\n            <>\r\n              <Typography variant=\"h3\" className={classes.heading}>\r\n                Products\r\n              </Typography>\r\n              <Button\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  style={{ marginLeft: \"auto\", display: \"flex\" }}\r\n                  size=\"large\"\r\n                  startIcon={<Add />}\r\n                  onClick={() => push(\"/admin/create-product\")}\r\n              >\r\n                Create\r\n              </Button>\r\n\r\n              <Box marginBottom={5} className={classes.filterRow}>\r\n                <Box marginTop={5} className={classes.sortControls}>\r\n                  <FormControl className={classes.formControl} style={{ marginRight: '20px' }}>\r\n                    <InputLabel>Sort By</InputLabel>\r\n                    <Select value={sortBy} onChange={handleSortByChange}>\r\n                      <MenuItem value=\"productName\">Product Name</MenuItem>\r\n                      <MenuItem value=\"price\">Price</MenuItem>\r\n                      <MenuItem value=\"createdAt\">Date</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                  <FormControl className={classes.formControl}>\r\n                    <InputLabel>Direction</InputLabel>\r\n                    <Select value={sortDir} onChange={handleSortDirChange}>\r\n                      <MenuItem value=\"asc\">Ascending</MenuItem>\r\n                      <MenuItem value=\"desc\">Descending</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </Box>\r\n              </Box>\r\n\r\n              <TableContainer component={Paper} className={classes.tableContainer}>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell></TableCell>\r\n                      <TableCell>Image</TableCell>\r\n                      <TableCell>Name</TableCell>\r\n                      <TableCell>Price</TableCell>\r\n                      <TableCell>Quantity</TableCell>\r\n                      <TableCell>Special Price</TableCell>\r\n                      <TableCell>Category</TableCell>\r\n                      <TableCell></TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n\r\n                  <TableBody>\r\n                    {products.map((product) => (\r\n                        <Row key={product.productId} product={product} />\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={total}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onPageChange={handleChangePage}\r\n                    onRowsPerPageChange={handleChangeRowsPerPage}\r\n                />\r\n              </TableContainer>\r\n            </>\r\n        )}\r\n      </Container>\r\n  );\r\n});","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\ProductForm\\index.js",["378","379"],"import { useEffect, useState } from \"react\";\r\nimport {\r\n    Container,\r\n    Typography,\r\n    TextField,\r\n    MenuItem,\r\n    Button,\r\n    InputAdornment,\r\n    CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { CameraAltOutlined } from \"@material-ui/icons\";\r\nimport { useStyles } from \"./style\";\r\nimport { AdminAxios, Axios } from \"../../../api/instances\";\r\nimport * as Api from \"../../../api/endpoints\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { createProduct, editProduct } from \"../../../redux/slices/admin\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { withAdminAuth } from \"../../../hoc/withAdminAuth\";\r\nimport { Loader } from \"../../../components/Loader/\";\r\n\r\nexport const ProductForm = withAdminAuth(true)(({ edit }) => {\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const [productLoading, setProductLoading] = useState(false);\r\n    const loading = useSelector((state) => state.admin.authLoading);\r\n    const classes = useStyles();\r\n    const [categories, setCategories] = useState([]);\r\n    const [name, setName] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [category, setCategory] = useState();\r\n    const [src, setSrc] = useState(\"\");\r\n    const [file, setFile] = useState(null);\r\n    const [price, setPrice] = useState();\r\n    const [quantity, setQuantity] = useState();\r\n    const [discount, setDiscount] = useState(0);\r\n\r\n    const changeNameHandler = (e) => setName(e.target.value);\r\n    const changeDescriptionHandler = (e) => setDescription(e.target.value);\r\n    const changeCategoryHandler = (e) => setCategory(e.target.value);\r\n    const changePriceHandler = (e) => setPrice(e.target.value);\r\n    const changeQuantityHandler = (e) => setQuantity(e.target.value);\r\n    const changeDiscountHandler = (e) => setDiscount(e.target.value);\r\n    const changeImageHandler = async (e) => {\r\n        const file = e?.target?.files[0];\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => {\r\n                setFile(file);\r\n                setSrc(reader.result);\r\n            };\r\n        }\r\n    };\r\n\r\n    const setProductData = ({\r\n                                name,\r\n                                description,\r\n                                category,\r\n                                image,\r\n                                price,\r\n                                quantity,\r\n                                discount,\r\n                            }) => {\r\n        setName(name);\r\n        setDescription(description);\r\n        setCategory(category.categoryId);\r\n        setPrice(price);\r\n        setQuantity(quantity);\r\n        setDiscount(discount);\r\n        setSrc(image);\r\n        setFile(image);\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (edit) {\r\n                setProductLoading(true);\r\n                const productResponse = await AdminAxios.get(Api.ADMIN_PRODUCT(id));\r\n                setProductData(productResponse.data.product);\r\n                setProductLoading(false);\r\n            }\r\n        })();\r\n\r\n        (async () => {\r\n            const categoriesResponse = await Axios.get(Api.GET_CATEGORIES);\r\n            setCategories(categoriesResponse.data.categories);\r\n        })();\r\n    }, []);\r\n\r\n  const createProductHandler = (e) => {\r\n    e.preventDefault();\r\n    if (edit) {\r\n      dispatch(\r\n        editProduct({\r\n          id,\r\n          name,\r\n          description,\r\n          file,\r\n          category,\r\n          price,\r\n          quantity,\r\n            discount,\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(\r\n        createProduct({\r\n          name,\r\n          description,\r\n          file,\r\n          category,\r\n          price,\r\n          quantity,\r\n            discount,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\">\r\n            {productLoading ? (\r\n                <Loader />\r\n            ) : (\r\n                <>\r\n                    <Typography variant=\"h3\" className={classes.heading}>\r\n                        {edit ? \"Edit\" : \"Create\"} Product\r\n                    </Typography>\r\n                    <form className={classes.form} onSubmit={createProductHandler}>\r\n                        <TextField\r\n                            label=\"Name\"\r\n                            className={classes.textField}\r\n                            value={name}\r\n                            onChange={changeNameHandler}\r\n                        />\r\n                        <TextField\r\n                            className={classes.textField}\r\n                            label=\"Description\"\r\n                            multiline\r\n                            rows={4}\r\n                            value={description}\r\n                            onChange={changeDescriptionHandler}\r\n                        />\r\n                        <TextField\r\n                            select\r\n                            label=\"Category\"\r\n                            value={category}\r\n                            onChange={changeCategoryHandler}\r\n                        >\r\n                            {categories.map(({ categoryId, categoryName }) => (\r\n                                <MenuItem key={categoryId} value={categoryId}>\r\n                                    {categoryName}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                        <input\r\n                            type=\"file\"\r\n                            id=\"fileInput\"\r\n                            accept=\"image/png, image/jpg, image/jpeg, image/webp\"\r\n                            hidden\r\n                            onChange={changeImageHandler}\r\n                        />\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            style={{ color: \"white\" }}\r\n                            component=\"label\"\r\n                            htmlFor=\"fileInput\"\r\n                            endIcon={<CameraAltOutlined />}\r\n                            size=\"small\"\r\n                        >\r\n                            Upload Image\r\n                        </Button>\r\n                        <div className={classes.img}>\r\n                            <img src={src} alt=\"Preview image\"/>\r\n                        </div>\r\n                        <TextField\r\n                            type=\"number\"\r\n                            label=\"Price\"\r\n                            value={price}\r\n                            onChange={changePriceHandler}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">VNĐ</InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                        <TextField\r\n                            type=\"number\"\r\n                            label=\"Quantity\"\r\n                            value={quantity}\r\n                            onChange={changeQuantityHandler}\r\n                        />\r\n                        <TextField\r\n                            type=\"number\"\r\n                            label=\"Discount\"\r\n                            value={discount}\r\n                            onChange={changeDiscountHandler}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">%</InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            style={{ color: \"white\" }}\r\n                            size=\"large\"\r\n                            disabled={loading}\r\n                            endIcon={\r\n                                loading ? <CircularProgress size={20} color=\"primary\" /> : null\r\n                            }\r\n                        >\r\n                            {edit ? \"Edit\" : \"Create\"}\r\n                        </Button>\r\n                    </form>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n});","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Home\\index.js",["380","381"],"import {\r\n  Container,\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Paper,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\nimport {} from \"@material-ui/icons\";\r\nimport { useStyles } from \"./style\";\r\nimport { withAdminAuth } from \"../../../hoc/withAdminAuth\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const Home = withAdminAuth(true)((props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <Container maxWidth=\"lg\" className={classes.container}>\r\n        <Grid container spacing={3}>\r\n          <Grid item md={2}>\r\n            <Paper className={classes.paper}>\r\n              <Typography component={Link} to=\"/admin/products\" variant=\"h6\">\r\n                Products\r\n              </Typography>\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item md={2}>\r\n            <Paper className={classes.paper}>\r\n              <Typography component={Link} to=\"/admin/categories\" variant=\"h6\">\r\n                Categories\r\n              </Typography>\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item md={2}>\r\n            <Paper className={classes.paper}>\r\n              <Typography component={Link} to=\"/admin/orders\" variant=\"h6\">\r\n                Orders\r\n              </Typography>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n});\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Categories\\index.js",["382"],"import { useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Button,\r\n  TableCell,\r\n  TableContainer,\r\n  Paper,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  IconButton,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { Add, EditOutlined, DeleteOutlineOutlined } from \"@material-ui/icons\";\r\nimport { useStyles } from \"./style\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchCategories, deleteCategory } from \"../../../redux/slices/admin\";\r\nimport { withAdminAuth } from \"../../../hoc/withAdminAuth\";\r\nimport { Loader } from \"../../../components/Loader/\";\r\n\r\nexport const Categories = withAdminAuth(true)((props) => {\r\n  const classes = useStyles();\r\n  const { push } = useHistory();\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state) => state.admin.contentLoading);\r\n  const categories = useSelector((state) => state.admin.categories);\r\n  const deleteLoading = useSelector((state) => state.admin.authLoading);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCategories());\r\n  }, []);\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <Typography variant=\"h3\" className={classes.heading}>\r\n            Categories\r\n          </Typography>\r\n\r\n          <div className={classes.container}>\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              style={{ marginLeft: \"auto\", display: \"flex\" }}\r\n              size=\"large\"\r\n              startIcon={<Add />}\r\n              onClick={() => push(\"/admin/create-category\")}\r\n            >\r\n              Create\r\n            </Button>\r\n\r\n            <TableContainer\r\n              component={Paper}\r\n              className={classes.tableContainer}\r\n            >\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Name</TableCell>\r\n                    <TableCell></TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n\r\n                <TableBody>\r\n                  {categories.map(({ _id, name }) => (\r\n                    <TableRow key={_id}>\r\n                      <TableCell>{name}</TableCell>\r\n                      <TableCell align=\"right\">\r\n                        {deleteLoading ? (\r\n                          <CircularProgress size={20} color=\"primary\" />\r\n                        ) : (\r\n                          <>\r\n                            <IconButton\r\n                              onClick={() =>\r\n                                push(`/admin/edit-category/${_id}`)\r\n                              }\r\n                              color=\"primary\"\r\n                              size=\"small\"\r\n                              style={{ marginRight: \"10px\" }}\r\n                            >\r\n                              <EditOutlined />\r\n                            </IconButton>\r\n                            <IconButton\r\n                              color=\"secondary\"\r\n                              size=\"small\"\r\n                              onClick={() => dispatch(deleteCategory(_id))}\r\n                            >\r\n                              <DeleteOutlineOutlined />\r\n                            </IconButton>\r\n                          </>\r\n                        )}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </div>\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n});\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\CategoryForm\\index.js",["383"],"import { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport {} from \"@material-ui/icons\";\r\nimport { useStyles } from \"./style\";\r\nimport { createCategory, editCategory } from \"../../../redux/slices/admin\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Axios } from \"../../../api/instances\";\r\nimport * as Api from \"../../../api/endpoints\";\r\nimport { withAdminAuth } from \"../../../hoc/withAdminAuth\";\r\nimport { Loader } from \"../../../components/Loader/\";\r\n\r\nexport const CategoryForm = withAdminAuth(true)(({ edit }) => {\r\n  const classes = useStyles();\r\n  const { id } = useParams();\r\n  const [name, setName] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state) => state.admin.authLoading);\r\n  const [categoryLoading, setCategoryLoading] = useState(false);\r\n\r\n  const changeNameHandler = (e) => setName(e.target.value);\r\n\r\n  const createCategoryHandler = (e) => {\r\n    e.preventDefault();\r\n    if (edit) dispatch(editCategory({ id, name }));\r\n    else dispatch(createCategory({ name }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (edit) {\r\n        console.log(\"Category\");\r\n        setCategoryLoading(true);\r\n        const res = await Axios.get(Api.GET_CATEGORY(id));\r\n        setName(res.data.category.name);\r\n        setCategoryLoading(false);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      {categoryLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <Typography variant=\"h3\" className={classes.heading}>\r\n            {edit ? \"Edit\" : \"Create\"} Product\r\n          </Typography>\r\n\r\n          <form className={classes.form} onSubmit={createCategoryHandler}>\r\n            <TextField label=\"Name\" value={name} onChange={changeNameHandler} />\r\n            <Button\r\n              style={{ color: \"white\" }}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              disabled={loading}\r\n              type=\"submit\"\r\n              endIcon={\r\n                loading ? <CircularProgress size={20} color=\"primary\" /> : null\r\n              }\r\n            >\r\n              {edit ? \"Edit\" : \"Create\"}\r\n            </Button>\r\n          </form>\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n});\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Login\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Header\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Sidebar\\index.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Products\\Row.js",["384","385","386","387"],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\ProductForm\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Home\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\hoc\\withAdminAuth.js",["388"],"import { useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const withAdminAuth = (auth) => (WrappedComponent) => {\r\n  return (props) => {\r\n    const { replace } = useHistory();\r\n    const admin = useSelector((state) => state.admin.admin);\r\n\r\n    useEffect(() => {\r\n      if (auth && !admin) replace(\"/admin/login\");\r\n      if (!auth && admin) replace(\"/admin\");\r\n    }, [admin]);\r\n\r\n    return <WrappedComponent {...props} />;\r\n  };\r\n};\r\n","F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Products\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Categories\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\CategoryForm\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\components\\Sidebar\\style.js",[],"F:\\Java-Project\\ecommerce-frontend\\src\\pages\\adminPages\\Products\\Reviews.js",[],{"ruleId":"389","replacedBy":"390"},{"ruleId":"391","replacedBy":"392"},{"ruleId":"393","severity":1,"message":"394","line":27,"column":40,"nodeType":"395","endLine":27,"endColumn":42,"suggestions":"396"},{"ruleId":"397","severity":1,"message":"398","line":7,"column":7,"nodeType":"399","messageId":"400","endLine":7,"endColumn":19},{"ruleId":"401","severity":1,"message":"402","line":46,"column":15,"nodeType":"403","messageId":"404","endLine":46,"endColumn":30},{"ruleId":"397","severity":1,"message":"405","line":4,"column":3,"nodeType":"399","messageId":"400","endLine":4,"endColumn":22},{"ruleId":"401","severity":1,"message":"402","line":28,"column":15,"nodeType":"403","messageId":"404","endLine":28,"endColumn":30},{"ruleId":"397","severity":1,"message":"398","line":174,"column":7,"nodeType":"399","messageId":"400","endLine":174,"endColumn":19},{"ruleId":"406","severity":1,"message":"407","line":257,"column":28,"nodeType":"408","messageId":"409","endLine":257,"endColumn":30},{"ruleId":"406","severity":1,"message":"407","line":302,"column":28,"nodeType":"408","messageId":"409","endLine":302,"endColumn":30},{"ruleId":"393","severity":1,"message":"410","line":20,"column":6,"nodeType":"395","endLine":20,"endColumn":8,"suggestions":"411"},{"ruleId":"393","severity":1,"message":"410","line":20,"column":6,"nodeType":"395","endLine":20,"endColumn":8,"suggestions":"412"},{"ruleId":"393","severity":1,"message":"413","line":39,"column":6,"nodeType":"395","endLine":39,"endColumn":29,"suggestions":"414"},{"ruleId":"393","severity":1,"message":"415","line":43,"column":6,"nodeType":"395","endLine":43,"endColumn":8,"suggestions":"416"},{"ruleId":"393","severity":1,"message":"413","line":64,"column":6,"nodeType":"395","endLine":64,"endColumn":29,"suggestions":"417"},{"ruleId":"393","severity":1,"message":"415","line":68,"column":6,"nodeType":"395","endLine":68,"endColumn":37,"suggestions":"418"},{"ruleId":"406","severity":1,"message":"419","line":156,"column":42,"nodeType":"408","messageId":"409","endLine":156,"endColumn":44},{"ruleId":"397","severity":1,"message":"420","line":7,"column":3,"nodeType":"399","messageId":"400","endLine":7,"endColumn":13},{"ruleId":"393","severity":1,"message":"410","line":52,"column":6,"nodeType":"395","endLine":52,"endColumn":8,"suggestions":"421"},{"ruleId":"397","severity":1,"message":"422","line":86,"column":13,"nodeType":"399","messageId":"400","endLine":86,"endColumn":16},{"ruleId":"397","severity":1,"message":"423","line":16,"column":3,"nodeType":"399","messageId":"400","endLine":16,"endColumn":9},{"ruleId":"393","severity":1,"message":"424","line":38,"column":6,"nodeType":"395","endLine":38,"endColumn":8,"suggestions":"425"},{"ruleId":"426","severity":1,"message":"427","line":49,"column":17,"nodeType":"428","endLine":49,"endColumn":44},{"ruleId":"393","severity":1,"message":"410","line":25,"column":6,"nodeType":"395","endLine":25,"endColumn":46,"suggestions":"429"},{"ruleId":"397","severity":1,"message":"430","line":2,"column":41,"nodeType":"399","messageId":"400","endLine":2,"endColumn":44},{"ruleId":"397","severity":1,"message":"431","line":9,"column":10,"nodeType":"399","messageId":"400","endLine":9,"endColumn":16},{"ruleId":"397","severity":1,"message":"432","line":10,"column":10,"nodeType":"399","messageId":"400","endLine":10,"endColumn":24},{"ruleId":"397","severity":1,"message":"433","line":17,"column":9,"nodeType":"399","messageId":"400","endLine":17,"endColumn":15},{"ruleId":"393","severity":1,"message":"434","line":23,"column":6,"nodeType":"395","endLine":23,"endColumn":8,"suggestions":"435"},{"ruleId":"393","severity":1,"message":"436","line":13,"column":8,"nodeType":"395","endLine":13,"endColumn":14,"suggestions":"437"},{"ruleId":"393","severity":1,"message":"410","line":16,"column":6,"nodeType":"395","endLine":16,"endColumn":8,"suggestions":"438"},{"ruleId":"397","severity":1,"message":"439","line":14,"column":10,"nodeType":"399","messageId":"400","endLine":14,"endColumn":20},{"ruleId":"397","severity":1,"message":"440","line":6,"column":3,"nodeType":"399","messageId":"400","endLine":6,"endColumn":12},{"ruleId":"397","severity":1,"message":"441","line":12,"column":10,"nodeType":"399","messageId":"400","endLine":12,"endColumn":16},{"ruleId":"397","severity":1,"message":"433","line":14,"column":9,"nodeType":"399","messageId":"400","endLine":14,"endColumn":15},{"ruleId":"393","severity":1,"message":"410","line":24,"column":6,"nodeType":"395","endLine":24,"endColumn":42,"suggestions":"442"},{"ruleId":"393","severity":1,"message":"410","line":46,"column":6,"nodeType":"395","endLine":46,"endColumn":8,"suggestions":"443"},{"ruleId":"393","severity":1,"message":"410","line":43,"column":6,"nodeType":"395","endLine":43,"endColumn":42,"suggestions":"444"},{"ruleId":"393","severity":1,"message":"445","line":88,"column":8,"nodeType":"395","endLine":88,"endColumn":10,"suggestions":"446"},{"ruleId":"447","severity":1,"message":"448","line":175,"column":29,"nodeType":"428","endLine":175,"endColumn":65},{"ruleId":"397","severity":1,"message":"449","line":3,"column":3,"nodeType":"399","messageId":"400","endLine":3,"endColumn":9},{"ruleId":"397","severity":1,"message":"450","line":4,"column":3,"nodeType":"399","messageId":"400","endLine":4,"endColumn":10},{"ruleId":"393","severity":1,"message":"410","line":34,"column":6,"nodeType":"395","endLine":34,"endColumn":8,"suggestions":"451"},{"ruleId":"393","severity":1,"message":"445","line":45,"column":6,"nodeType":"395","endLine":45,"endColumn":8,"suggestions":"452"},{"ruleId":"397","severity":1,"message":"453","line":4,"column":3,"nodeType":"399","messageId":"400","endLine":4,"endColumn":17},{"ruleId":"397","severity":1,"message":"454","line":14,"column":3,"nodeType":"399","messageId":"400","endLine":14,"endColumn":9},{"ruleId":"397","severity":1,"message":"455","line":25,"column":10,"nodeType":"399","messageId":"400","endLine":25,"endColumn":17},{"ruleId":"426","severity":1,"message":"427","line":55,"column":13,"nodeType":"428","endLine":55,"endColumn":40},{"ruleId":"393","severity":1,"message":"436","line":13,"column":8,"nodeType":"395","endLine":13,"endColumn":15,"suggestions":"456"},"no-native-reassign",["457"],"no-negated-in-lhs",["458"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["459"],"no-unused-vars","'initialState' is assigned a value but never used.","Identifier","unusedVar","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'createEntityAdapter' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["460"],["461"],"React Hook useEffect has missing dependencies: 'admin' and 'history'. Either include them or remove the dependency array.",["462"],"React Hook useEffect has missing dependencies: 'admin' and 'dispatch'. Either include them or remove the dependency array.",["463"],["464"],["465"],"Expected '===' and instead saw '=='.","'Typography' is defined but never used.",["466"],"'res' is assigned a value but never used.","'Avatar' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["467"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["468"],"'Box' is defined but never used.","'Filter' is defined but never used.","'filterProducts' is defined but never used.","'filter' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'products'. Either include them or remove the dependency array.",["469"],"React Hook useEffect has a missing dependency: 'replace'. Either include it or remove the dependency array.",["470"],["471"],"'useHistory' is defined but never used.","'TableHead' is defined but never used.","'Rating' is defined but never used.",["472"],["473"],["474"],"React Hook useEffect has missing dependencies: 'edit' and 'id'. Either include them or remove the dependency array.",["475"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.",["476"],["477"],"'TableContainer' is defined but never used.","'Button' is defined but never used.","'Reviews' is defined but never used.",["478"],"no-global-assign","no-unsafe-negation",{"desc":"479","fix":"480"},{"desc":"481","fix":"482"},{"desc":"481","fix":"483"},{"desc":"484","fix":"485"},{"desc":"486","fix":"487"},{"desc":"484","fix":"488"},{"desc":"489","fix":"490"},{"desc":"481","fix":"491"},{"desc":"492","fix":"493"},{"desc":"494","fix":"495"},{"desc":"496","fix":"497"},{"desc":"498","fix":"499"},{"desc":"481","fix":"500"},{"desc":"501","fix":"502"},{"desc":"481","fix":"503"},{"desc":"501","fix":"504"},{"desc":"505","fix":"506"},{"desc":"481","fix":"507"},{"desc":"505","fix":"508"},{"desc":"509","fix":"510"},"Update the dependencies array to be: [history]",{"range":"511","text":"512"},"Update the dependencies array to be: [dispatch]",{"range":"513","text":"514"},{"range":"515","text":"514"},"Update the dependencies array to be: [userExist, adminExist, admin, history]",{"range":"516","text":"517"},"Update the dependencies array to be: [admin, dispatch]",{"range":"518","text":"519"},{"range":"520","text":"517"},"Update the dependencies array to be: [id, history.location.pathname, dispatch, admin]",{"range":"521","text":"522"},{"range":"523","text":"514"},"Update the dependencies array to be: [dispatch, id]",{"range":"524","text":"525"},"Update the dependencies array to be: [dispatch, id, page, rowsPerPage, sortBy, sortDir]",{"range":"526","text":"527"},"Update the dependencies array to be: [dispatch, products]",{"range":"528","text":"529"},"Update the dependencies array to be: [replace, user]",{"range":"530","text":"531"},{"range":"532","text":"514"},"Update the dependencies array to be: [dispatch, page, rowsPerPage, sortBy, sortDir]",{"range":"533","text":"534"},{"range":"535","text":"514"},{"range":"536","text":"534"},"Update the dependencies array to be: [edit, id]",{"range":"537","text":"538"},{"range":"539","text":"514"},{"range":"540","text":"538"},"Update the dependencies array to be: [admin, replace]",{"range":"541","text":"542"},[805,807],"[history]",[673,675],"[dispatch]",[664,666],[1192,1215],"[userExist, adminExist, admin, history]",[1306,1308],"[admin, dispatch]",[1919,1942],[2035,2066],"[id, history.location.pathname, dispatch, admin]",[2067,2069],[1121,1123],"[dispatch, id]",[1186,1226],"[dispatch, id, page, rowsPerPage, sortBy, sortDir]",[991,993],"[dispatch, products]",[427,433],"[replace, user]",[587,589],[1135,1171],"[dispatch, page, rowsPerPage, sortBy, sortDir]",[1314,1316],[1366,1402],[3348,3350],"[edit, id]",[1104,1106],[1501,1503],[448,455],"[admin, replace]"]